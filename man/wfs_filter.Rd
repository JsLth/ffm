% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wfs_filter.R
\name{wfs_filter}
\alias{wfs_filter}
\title{WFS filters}
\usage{
wfs_filter(
  ...,
  bbox = NULL,
  poly = NULL,
  predicate = "intersects",
  lang = c("cql", "xml")
)
}
\arguments{
\item{...}{Used to construct CQL filters. Dot arguments accept an R-like
syntax that is converted to CQL queries internally. These queries basically
consist of a property name on the left, an aribtrary vector on the right,
and an operator that links both sides. If multiple queries are provided,
they will be chained with \code{AND}. The following operators and their
respective equivalents in CQL are supported:

\tabular{ll}{
\strong{R} \tab \strong{CQL}\cr
\code{==}      \tab \code{=}    \cr
\code{!=}      \tab \code{<>}   \cr
\code{<}       \tab \code{<}    \cr
\code{>}       \tab \code{>}    \cr
\code{>=}      \tab \code{>=}   \cr
\code{<=}      \tab \code{<=}   \cr
\code{~}       \tab \code{~}    \cr
\code{\%!~\%}    \tab \code{!~}   \cr
\code{\%LIKE\%}  \tab \code{LIKE} \cr
\code{\%ILIKE\%} \tab \code{ILIKE}\cr
\code{\%in\%}    \tab \code{IN}
}

To construct more complex queries, you can use the \code{filter} argument
to pass CQL queries directly.}

\item{bbox}{An sf geometry or a boundary box vector of the format
\code{c(xmin, ymin, xmax, ymax)}. Used as a geometric filter to include
only those geometries that relate to \code{bbox} according to the predicate
specified in \code{predicate}. If an sf geometry is provided, coordinates
are automatically transformed to ESPG:25832 (the default CRS), otherwise
they are expected to be in EPSG:25832.}

\item{poly}{An sf geometry. Used as a geometric filter to include
only those geometries that relate to \code{poly} according to the predicate
specified in \code{predicate}. Coordinates are automatically transformed to
ESPG:25832 (the default CRS).}

\item{predicate}{A spatial predicate that is used to relate the output
geometries with the object specified in \code{bbox} or \code{poly}. For
example, if \code{predicate = "within"}, and \code{bbox} is specified,
returns only those geometries that lie within \code{bbox}. Can be one of
\code{"equals"}, \code{"disjoint"}, \code{"intersects"}, \code{"touches"},
\code{"crosses"}, \code{"within"}, \code{"contains"}, \code{"overlaps"},
\code{"relate"}, \code{"dwithin"}, or \code{"beyond"}. Defaults to
\code{"intersects"}.}

\item{lang}{Query language to use for constructing the query. By default,
almost all \code{ffm} functions use CQL because it is simpler and less
prone to errors. However, CQL is limited in terms of query size. Especially
when providing a \code{poly}, URLs can become so long that the WFS server
will decline them. XML can be a valid alternative to construct large queries.
Additionally, some services like the one used by \code{\link{bkg_geonames}}
only support XML.}
}
\value{
A CQL query or an XML query depending on the \code{lang} argument.
}
\description{
Utility functions to construct XML or CQL queries. These functions are the
backend of the \code{filter} argument in the filter capabilities of all
\code{ffm} functions that interact with a WFS (e.g., \code{\link{bkg_admin}},
\code{\link{bkg_clc}} or \code{bkb_geonames}).
}
\examples{
# CQL and XML support mostly the same things
wfs_filter(ags \%LIKE\% "05\%", lang = "cql")
wfs_filter(ags \%LIKE\% "05\%", lang = "xml")

bbox <- c(xmin = 5, ymin = 50, xmax = 7, ymax = 52)
wfs_filter(bbox = bbox, lang = "cql")
wfs_filter(bbox = bbox, lang = "xml")
}
