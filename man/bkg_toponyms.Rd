% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/toponyms.R
\name{bkg_toponyms}
\alias{bkg_toponyms}
\title{Toponyms}
\usage{
bkg_toponyms(..., epsg = 3035, properties = NULL, max = NULL)
}
\arguments{
\item{...}{Used to construct CQL filters. Dot arguments accept an R-like
syntax that is converted to CQL queries internally. These queries basically
consist of a property name on the left, an aribtrary vector on the right,
and an operator that links both sides. If multiple queries are provided,
they will be chained with \code{AND}. The following operators and their
respective equivalents in CQL are supported:

\tabular{ll}{
\strong{R} \tab \strong{CQL}\cr
\code{==}      \tab \code{=}    \cr
\code{!=}      \tab \code{<>}   \cr
\code{<}       \tab \code{<}    \cr
\code{>}       \tab \code{>}    \cr
\code{>=}      \tab \code{>=}   \cr
\code{<=}      \tab \code{<=}   \cr
\code{~}       \tab \code{~}    \cr
\code{\%!~\%}    \tab \code{!~}   \cr
\code{\%LIKE\%}  \tab \code{LIKE} \cr
\code{\%ILIKE\%} \tab \code{ILIKE}\cr
\code{\%in\%}    \tab \code{IN}
}

To construct more complex queries, you can use the \code{filter} argument
to pass CQL queries directly.}

\item{epsg}{An EPSG code specifying a coordinate reference system of the
output. If you're unsure what this means, try running
\code{sf::st_crs(...)$epsg} on a spatial object that you are working with.
Defaults to 3035.}

\item{properties}{Vector of columns to include in the output.}

\item{max}{Maximum number of results to return.}
}
\value{
A dataframe containing the following columns:
}
\description{
Get geographic names including toponyms and endonyms.
}
