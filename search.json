[{"path":"https://jslth.github.io/ffm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ffm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jslth.github.io/ffm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonas Lieth. Author, maintainer.           0000-0002-3451-3176","code":""},{"path":"https://jslth.github.io/ffm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lieth J (2025). ffm: Download Official Spatial Data Germany. R package version 0.1.0.","code":"@Manual{,   title = {ffm: Download Official Spatial Data from Germany},   author = {Jonas Lieth},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"https://jslth.github.io/ffm/index.html","id":"ffm-","dir":"","previous_headings":"","what":"Download Official Spatial Data from Germany","title":"Download Official Spatial Data from Germany","text":"{ffm} R package provides quick easy access data geodata center Germany’s Federal Agency Cartography Geodesy (BKG). BKG official provider spatial data Germany provides quite datasets open data. data range administrative areas earth observation data often crucial working regional statistics Germany. Part motivation package stems frustration working areal identifiers returned packages like wiesbaden restatis able quickly link spatial representations. name ffm based colloquial short name Frankfurt Main BKG’s headquarters located.","code":""},{"path":"https://jslth.github.io/ffm/index.html","id":"gallery","dir":"","previous_headings":"","what":"Gallery","title":"Download Official Spatial Data from Germany","text":"following examples created using {ffm}. can see code examples/ directory.","code":""},{"path":"https://jslth.github.io/ffm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download Official Spatial Data from Germany","text":"can install development version ffm GitHub :","code":"# install.packages(\"pak\") pak::pak(\"jslth/ffm\")"},{"path":"https://jslth.github.io/ffm/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Download Official Spatial Data from Germany","text":"Retrieving data pretty straightforward:  package makes easy go deeper just getting data. many functions, can use spatial filters.  Attribute filters supported using R-like syntax.","code":"library(ffm) districts <- bkg_admin(level = \"krs\", scale = \"5000\") library(ggplot2)  ggplot(districts) +   geom_sf(fill = NA) +   theme_void() districts <- bkg_admin(   level = \"krs\",   scale = \"5000\",   bbox = c(xmin = 700000, ymin = 5900000, xmax = 850000, ymax = 6000000),   predicate = \"intersects\" ) districts$label <- ifelse(   districts$bez == \"Kreisfreie Stadt\",   paste(\"Stadt\", districts$gen),   districts$gen ) library(ggrepel)  ggplot(districts) +   geom_sf(fill = NA) +   geom_text_repel(     aes(label = label, geometry = geometry),     stat = \"sf_coordinates\",     size = 3   ) +   theme_void() munics <- bkg_admin(   level = \"gem\",   key_date = \"1231\",   sn_l %in% c(\"08\", \"09\") ) munics$popdens <- munics$ewz / munics$kfl munics$popdens[munics$popdens == 0] <- NA ggplot(munics) +   geom_sf(aes(fill = popdens), color = NA) +   scale_fill_viridis_b(\"Population / km²\", transform = \"log10\") +   ggtitle(\"Population density in Southern Germany\") +   theme_void()"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":null,"dir":"Reference","previous_headings":"","what":"Administrative areas — bkg_admin","title":"Administrative areas — bkg_admin","text":"Retrieve polygon geometries administrative areas Germany. administrative levels supported different spatial resolutions. bkg_admin interfaces WFS allows prefiltering provides historical data allows maximum scale 1:250,000. bkg_admin_archive allows access historical data prefiltering. bkg_admin_highres (vg25) allows access high-resolution data going low 1:25,000 allows prefiltering. functions interface vg* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Administrative areas — bkg_admin","text":"","code":"bkg_admin(   ...,   level = \"krs\",   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   key_date = c(\"0101\", \"1231\"),   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )  bkg_admin_archive(   level = \"krs\",   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   key_date = c(\"0101\", \"1231\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_admin_highres(   level = \"krs\",   year = \"latest\",   layer = NULL,   timeout = 600,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Administrative areas — bkg_admin","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. level Administrative level download. Must one \"sta\" (Germany), \"lan\" (federal states), \"rbz\" (governmental districts), \"krs\" (districts), \"vwg\" (administrative associations), \"gem\" (municipalities), \"li\" (boundary lines), \"pk\" (municipality centroids). Defaults districts. scale Scale geometries. Can \"250\" (1:250,000), \"1000\" (1:1,000,000), \"2500\" (1:2,500,000) \"5000\" (1:5,000,000). \"250\", population data included output. Defaults \"250\". key_date resolution %% c(\"250\", \"5000\"), specifies key date download administrative data. Can either \"0101\" (January 1) \"1231\" (December 31). latter able georeference statistical data first integrates changes made new year. \"1231\", population data attached, otherwise . Note population data available scales (usually 250 1000). Defaults \"0101\". bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return. year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible. layer vg25 product used bkg_admin_highres contains couple metadata files. can set layer name read files, otherwise main file read.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Administrative areas — bkg_admin","text":"sf dataframe multipolygon geometries different columns depending geometry type. Areal geometries generally following columns: objid: Unique object identifier beginn: Creation object DLM ade: Integer representing administrative level. Can one 1: Germany 2: Federal state 3: Governmental district 4: District 5: Administrative association 6: Municipality gf: Integer representing geofactor; whether area \"structured\" . Land structured part state administrative unit divided administrative units. Can one 1: Unstructured, waterbody 2: Structured, waterbody 3: Unstructured, land 4: Structured, land bsg: Special areas, can 1 (Germany) 9 (Lake Constance) ars: Territorial code (Amtlicher Regionalschlu00fcssel). ARS stuctured hierarchically follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-9: Administrative association Position 10-12: Municipality ags: Official municipality key (Amtlicher Gemeindeschlu00fcssel). Related ARS shortened omit position 6 9. Structured follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-8: Municipality sdv_ars: ARS seat administration gen: Geographical name bez: Label administrative unit ibz: Identifier label bem: Comment label nbd: Formation geographical name. Can \"ja\" label part name \"nein\" otherwise. nuts: NUTS identifier based Eurostat regional classification ars_0: ARS identifier trailing zeroes ags_0: AGS identifier trailing zeroes wsk: Legally relevant date effectiveness administrative changes sn_l: Country component ARS sn_r: Governmental district component ARS sn_k: District component ARS sn_v1: First part administrative association component ARS sn_v2: Second part administrative association component ARS sn_g: Municipality component ARS fk_3: Purpose third key position. \"R\", indicates government region, \"K\", indicates district dkm_id: Identifier digital landscape model (DLM250) ewz: Number inhabitants kfl: Land register area square kilometers Boundary geometries (\"li\" can additional columns: agz: Type border. Can one 1: National border 2: State border 3: Governmental district border 4: District border 5: Administrative association border 6: Municipality border 9: Coastline rdg: Legal definition border. Can 1 (determined), 2 (determined) 9 (coastline) gm5: Border characteristic administrative association borders (AGZ 5). Used describe purpose borders. Can 0 (characteristics AGZ) 8 (non-association border) gmk: Border characteristic coast/ocean. Specifies whether border runs long waterbody. Can one 7: borders ocean 8: auxiliary borders ocean 9: borders coastline 0: characteristics dlm_id: Identifier digital landscape model (DLM250) Point geometries (\"pk\") following additional columns: otl: Name locality digital landscale model (DLM250) lon_dez: Decimal longitude lat_dez: Decimal latitude lon_gms: Geographical longitude lat_gms: Geographical latitude","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Administrative areas — bkg_admin","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Administrative areas — bkg_admin","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # You can use R-like operators to query the WFS bkg_admin(ags %LIKE% \"05%\") # districts in NRW bkg_admin(sn_l == \"05\") # does the same thing bkg_admin(gen %LIKE% \"Ber%\") # districts starting with Ber*  # To query population and area, the key date must be December 31 bkg_admin(ewz > 500000, key_date = \"1231\") # districts over 500k people bkg_admin(kfl <= 100, key_date = \"1231\") # districts with low land register area  # Using `gf == 9`, you can exclude waterbodies like oceans states <- bkg_admin(scale = \"5000\", level = \"lan\", gf == 9) plot(states$geometry)  # Download historical data bkg_admin_archive(scale = \"5000\", level = \"sta\", year = \"2021\")  if (FALSE) { # \\dontrun{ # Download high-resolution data (takes a long time!) bkg_admin_highres(level = \"lan\") } # } }"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Administrative hierarchy — bkg_admin_hierarchy","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"Retrieve polygon geometries municipalities Germany details relationships administrative areas higher levels territorial hierarchy. output functions contains identifiers names NUTS1 NUTS3 areas municipality belongs .","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"","code":"bkg_admin_hierarchy(   key_date = c(\"0101\", \"1231\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"key_date resolution %% c(\"250\", \"5000\"), specifies key date download administrative data. Can either \"0101\" (January 1) \"1231\" (December 31). latter able georeference statistical data first integrates changes made new year. \"1231\", population data attached, otherwise . Note population data available scales (usually 250 1000). Defaults \"0101\". year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"sf tibble multipolygon geometries similar output bkg_admin(level = \"gem\"). tibble additionally contains columns NUTS*_CODE NUTS*_NAME giving identifiers names administrative areas municipalities belong .","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() bkg_admin_hierarchy() }"},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":null,"dir":"Reference","previous_headings":"","what":"Official keys — bkg_ags","title":"Official keys — bkg_ags","text":"Retrieve geographical names associated official municipality keys regional keys. retrieve polygon geometries, see bkg_admin. functions interface wfs_gnde product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Official keys — bkg_ags","text":"","code":"bkg_ags(..., filter = NULL, properties = NULL, max = NULL)  bkg_ars(..., filter = NULL, properties = NULL, max = NULL)"},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Official keys — bkg_ags","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Official keys — bkg_ags","text":"dataframe containing respective identifier geographical names related state, government region, district municipality. bkg_ars additionally returns name administrative association.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Official keys — bkg_ags","text":"WFS interfaces like bkg_admin allow querying using CQL XML, bkg_ags bkg_ars (using GNDE service) support XML. implications allowed query filters (see wfs_filter).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Official keys — bkg_ags","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Either get geographical names for identifiers bkg_ars(ars == \"01\")  # ... or identifiers for geographical names bkg_ars(gemeinde == \"Köln\") }"},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":null,"dir":"Reference","previous_headings":"","what":"Airports — bkg_airports","title":"Airports — bkg_airports","text":"Retrieve international, regional, special airports Germany. Small landing sites included. functions interface wfs_poi_open product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Airports — bkg_airports","text":"","code":"bkg_airports(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Airports — bkg_airports","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Airports — bkg_airports","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name poi_id: Unique primary key point interest icao_code: ICAO code airport typ: Type airport. Can one following: international: International airport regional: Regional airport Sonderflughafen: Special airport","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Airports — bkg_airports","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Airports — bkg_airports","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get all airports in NRW airports <- bkg_airports(ars %LIKE% \"05%\") nrw <- bkg_admin(level = \"lan\", sn_l == \"05\") plot(nrw$geometry) plot(airports$geometry, add = TRUE, pch = 16) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Area code regions — bkg_area_codes","title":"Area code regions — bkg_area_codes","text":"Retrieves area code regions (Vorwahlgebiete) Germany. Area code regions based number registered telephone numbers.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area code regions — bkg_area_codes","text":"","code":"bkg_area_codes(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area code regions — bkg_area_codes","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area code regions — bkg_area_codes","text":"sf dataframe containing polygon geometries area code (vorwahl) associated region.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Area code regions — bkg_area_codes","text":"WFS interfaces like bkg_admin allow querying using CQL XML, bkg_area_codes supports XML. implications allowed query filters (see wfs_filter).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area code regions — bkg_area_codes","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() vorwahlen <- bkg_area_codes(vorwahl %LIKE% \"0215%\") plot(vorwahlen$geometry) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":null,"dir":"Reference","previous_headings":"","what":"Regions of authority — bkg_authorities","title":"Regions of authority — bkg_authorities","text":"Retrieve regions administrative responsibility job centers, employment agencies, offices employment agencies, regional directorates Federal Employment Agency well local, regional, higher regional courts. function interfaces wfs_bzb-open product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regions of authority — bkg_authorities","text":"","code":"bkg_authorities(   authority,   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regions of authority — bkg_authorities","text":"authority Type authority retrieve regions responsibility. Must one \"employment_agencies\", \"employment_offices\", \"job_centers\", \"directorates\", \"local_courts\", \"regional_courts\", \"higher_regional_courts\". ... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regions of authority — bkg_authorities","text":"sf tibble multipolygon geometries following columns: id: Identifier authority region dst_id: Identifier authority office uebergeord: Name superior authority name: Name authority","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Regions of authority — bkg_authorities","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regions of authority — bkg_authorities","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get only local courts that are subordinates of the regional court Cottbus bkg_authorities(   authority = \"local_courts\",   uebergeord %LIKE% \"%Cottbus\",   uebergeord %LIKE% \"Landgericht%\" ) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":null,"dir":"Reference","previous_headings":"","what":"Corine Land Cover Retrieve land cover polygons in Germany based on the Corine Land Cover (CLC) nomenclature. Corine Land Cover is a way to project by the European Commission to consistenly classify both land cover and land use. — bkg_clc","title":"Corine Land Cover Retrieve land cover polygons in Germany based on the Corine Land Cover (CLC) nomenclature. Corine Land Cover is a way to project by the European Commission to consistenly classify both land cover and land use. — bkg_clc","text":"function interfaces wfs_clc5_* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corine Land Cover Retrieve land cover polygons in Germany based on the Corine Land Cover (CLC) nomenclature. Corine Land Cover is a way to project by the European Commission to consistenly classify both land cover and land use. — bkg_clc","text":"","code":"bkg_clc(   ...,   year = \"2018\",   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corine Land Cover Retrieve land cover polygons in Germany based on the Corine Land Cover (CLC) nomenclature. Corine Land Cover is a way to project by the European Commission to consistenly classify both land cover and land use. — bkg_clc","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corine Land Cover Retrieve land cover polygons in Germany based on the Corine Land Cover (CLC) nomenclature. Corine Land Cover is a way to project by the European Commission to consistenly classify both land cover and land use. — bkg_clc","text":"sf dataframe polygon geometries following columns: clc*: CLC land cover classes given year. overview CLC classes can found Copernicus documentation. shape_length: Circumference polygon meters shape_area: Area polygon square meters","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Corine Land Cover Retrieve land cover polygons in Germany based on the Corine Land Cover (CLC) nomenclature. Corine Land Cover is a way to project by the European Commission to consistenly classify both land cover and land use. — bkg_clc","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corine Land Cover Retrieve land cover polygons in Germany based on the Corine Land Cover (CLC) nomenclature. Corine Land Cover is a way to project by the European Commission to consistenly classify both land cover and land use. — bkg_clc","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get glaciers in Germany bkg_clc(clc18 == \"335\")  # Get all coastal wetlands bkg_clc(clc18 %LIKE% \"42%\")  # Get only wetlands in Lower Saxony rlang::local_options(ffm_query_language = \"xml\") lowsax <- bkg_admin(level = \"lan\", scale = \"5000\", sn_l == \"03\", gf == 9) wetlands <- bkg_clc(clc18 %LIKE% \"4%\", poly = lowsax) plot(lowsax$geometry) plot(wetlands$geometry, add = TRUE) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":null,"dir":"Reference","previous_headings":"","what":"Border crossings — bkg_crossings","title":"Border crossings — bkg_crossings","text":"Retrieve border crossings Germany. road border crossing touches international border continues foreign side. includes ferry connections dirt roads.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Border crossings — bkg_crossings","text":"","code":"bkg_crossings(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Border crossings — bkg_crossings","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Border crossings — bkg_crossings","text":"dataframe following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name ort: Name nearest place strasse: Number label border-crossing street typ: Type checkpoint; always \"Straßenverkehr\"","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Border crossings — bkg_crossings","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Border crossings — bkg_crossings","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get all border crossings in Bavaria crossings <- bkg_crossings(bundesland == \"Bayern\") plot(crossings$geometry, pch = 16) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Digital elevation model — bkg_dem","title":"Digital elevation model — bkg_dem","text":"Retrieve digital elevation model (DEM) territory Germany.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Digital elevation model — bkg_dem","text":"","code":"bkg_dem(bbox = NULL, interpolation = NULL, epsg = 3035)"},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Digital elevation model — bkg_dem","text":"bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter mask coverage raster. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. interpolation Interpolation method preprocess raster. Can \"nearest-neighbor\", \"linear\", \"cubic\". seem work currently - despite listed capability WCS. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Digital elevation model — bkg_dem","text":"SpatRaster containing elevation data.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Digital elevation model — bkg_dem","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() && rlang::is_installed(\"terra\") library(sf)  # Elevation around Hanover han <- st_sfc(st_point(c(9.738611, 52.374444)), crs = 4326) han <- st_buffer(st_transform(han, 3035), dist = 2000) dem <- bkg_dem(bbox = han) terra::plot(dem) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Digital landscape model (DLM) — bkg_dlm","title":"Digital landscape model (DLM) — bkg_dlm","text":"Retrieve objects digital landscape model (DLM). DLMs description topographical objects landscape. Many services BKG derived DLM. Although function lets download feature type DLM, still need know data available features output actually mean. Since DLM gets pretty complicated, advised take look GeoInfoDok object type catalog. function interfaces dlm* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Digital landscape model (DLM) — bkg_dlm","text":"","code":"bkg_dlm(   type,   ...,   shape = c(\"point\", \"line\", \"polygon\"),   scale = c(\"250\", \"1000\"),   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Digital landscape model (DLM) — bkg_dlm","text":"type Feature type DLM. Can either identifier (e.g., 41010) description (e.g., Siedlungsflaeche). description can either prefixed AX_ . Providing identifier directly generally faster description needs matched requesting GetCapabilities endpoint service. Note feature types available shapes (see shape argument). see available feature types, can run bkg_feature_types(\"dlm250\") bkg_feature_types(\"dlm1000\"). ... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. shape Geometry type feature type. Must one \"point\", \"line\", \"polygon\". Defaults \"point\". shapes available feature types. scale Scale geometries. Can \"250\" (1:250,000) \"1000\" (1:1,000,000). Defaults \"250\". bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Digital landscape model (DLM) — bkg_dlm","text":"sf tibble geometry suggested shape. columns can vary depending selected feature type. meanings columns can also change depending feature type. Check GeoInfoDok object type catalog detailed documentation DLM metadata. general columns included feature types; include: id: Identifier object land: ISO-2 code country, usually DE modellart: Model type objart: Feature type digital landscape model (DLM) objart_txt: Title feature type objid: Unique object identifier beginn: Creation object DLM ende: Deletion object DLM objart_z: Object type composite object (ZUSO) objid_z: Object type composite object (ZUSO)","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Digital landscape model (DLM) — bkg_dlm","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Digital landscape model (DLM) — bkg_dlm","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Retrieve all train tracks in Leipzig library(sf) lzg <- st_sfc(st_point(c(12.37475, 51.340333)), crs = 4326) lzg <- st_buffer(st_transform(lzg, 3035), dist = 10000, endCapStyle = \"SQUARE\")  tracks <- bkg_dlm(\"Bahnstrecke\", shape = \"line\", poly = lzg) tracks  plot(lzg) plot(tracks$geometry, add = TRUE)  # Filter all tracks that are not rail cargo bkg_dlm(\"Bahnstrecke\", shape = \"line\", poly = lzg, bkt == \"1102\")  # Directly providing the identifier is faster bkg_dlm(\"42014\", shape = \"line\", poly = lzg) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographical objects and endonyms — bkg_geonames","title":"Geographical objects and endonyms — bkg_geonames","text":"Get geographic names including toponyms endonyms. bkg_geonames retrieves geographical \"objects\" based digital landscape model (DLM). objects contain set metadata national name identifier (NNID). NNIDs can used join endonyms related geographical object (bkg_endonyms). functions interface wfs_gnde product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographical objects and endonyms — bkg_geonames","text":"","code":"bkg_geonames(   ...,   names = TRUE,   ags = FALSE,   dlm = FALSE,   status = FALSE,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )  bkg_endonyms(..., filter = NULL, properties = NULL, max = NULL)"},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographical objects and endonyms — bkg_geonames","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. names TRUE, includes endonyms geographical objects output using bkg_endonyms. Technically, can FALSE, endpoint returns meta data geographical names default. argument TRUE, output merged endonym table requiring additional request. Defaults TRUE. ags TRUE, resolves AGS codes geographical names using bkg_ags. Note setting TRUE requires additional web request. Defaults FALSE. dlm TRUE, adds DLM identifier corresponding national name identifiers (NNID) output using bkg_dlm. Note setting TRUE requires additional web request. Defaults FALSE. status TRUE, adds date objects last edit output. Note setting TRUE requires additional web request. Defaults FALSE. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographical objects and endonyms — bkg_geonames","text":"dataframe containing following columns: nnid: National name identifier landesCode: Country identifier; 276 Germany. beschreibung: Optional details geoLaenge: Geographical longitude geoBreite: Geographical latitude hoehe: Elevation sea level hoeheger: Computed elevation sea level groesse: Undocumented, guess relates suggested print size labels ewz: Number inhabitants ewzger: Computed number inhabitants ags: Official municipality key (Amtlicher Gemeindeschlu00fcssel). Related ARS shortened omit position 6 9. Structured follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-8: Municipality gemteil: Whether place part municipality virtuell: Whether place real virtual locality ars: Territorial code (Amtlicher Regionalschlu00fcssel). ARS stuctured hierarchically follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-9: Administrative association Position 10-12: Municipality ags = TRUE, adds output bkg_ags. dlm = TRUE, adds column dlm_id containing identifiers bkg_dlm. bkg_endonyms contains following columns: name: Name geographical object geschlecht: applicable, grammatical gender geographical name also included output bkg_geonames names = TRUE.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographical objects and endonyms — bkg_geonames","text":"functions make use GN-DE WFS, just like bkg_ags, bkg_ars, bkg_area_codes. infrastructure behind actually quite sophisticated function may live standards. can use bkg_feature_types bkg_wfs manually explore service's endpoints required.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Geographical objects and endonyms — bkg_geonames","text":"WFS interfaces like bkg_admin allow querying using CQL XML, bkg_geonames bkg_endonyms (using GNDE service) support XML. implications allowed query filters (see wfs_filter).","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographical objects and endonyms — bkg_geonames","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() && requireNamespace(\"ggplot2\") # Plot geographical objects in Cologne library(sf) library(ggplot2) cgn <- st_sfc(st_point(c(6.956944, 50.938056)), crs = 4326) cgn <- st_buffer(st_transform(cgn, 3035), dist = 500)  cgn_names <- bkg_geonames(poly = cgn) st_geometry(cgn_names) <- st_centroid(st_geometry(cgn_names)) cgn_names <- cgn_names[lengths(st_intersects(cgn_names, cgn)) > 0, ] ggplot(cgn_names) + geom_sf_text(aes(label = name)) + theme_void() }"},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"INSPIRE grids — bkg_grid","title":"INSPIRE grids — bkg_grid","text":"Retrieve geometries INSPIRE-compliant grid geometries (also called \"GeoGitter\"). bkg_grid_fast() much faster bkg_grid_full() downloading heavily compressed versions grids. happens cost data richness bkg_grid_fast() contains geometries nothing else. Note arrow package needs installed use bkg_grid_fast(). Note output contains point geometries. times, want work rasters instead. convert given object , type following (terra package required): functions interface GeoGitter product BKG.","code":"terra::rast(out)"},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"INSPIRE grids — bkg_grid","text":"","code":"bkg_grid_fast(   year = c(\"2019\", \"2018\", \"2017\", \"2015\"),   resolution = c(\"100km\", \"10km\", \"5km\", \"1km\", \"250m\", \"100m\"),   timeout = 600,   update_cache = FALSE )  bkg_grid_full(   year = \"latest\",   resolution = c(\"100km\", \"10km\", \"5km\", \"1km\", \"250m\", \"100m\"),   timeout = 600,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"INSPIRE grids — bkg_grid","text":"year Version grid. Can \"2015\", \"2017\", \"2018\" \"2019\". bkg_grid_fast, \"latest\" downloads latest version grid. resolution Cell size grid. Can \"100m\", \"250m\", \"1km\", \"5km\", \"10km\", \"100km\". timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"INSPIRE grids — bkg_grid","text":"bkg_grid_fast returns sf dataframe point geometries features. bkg_grid_full also returns point geometries following additional features: x_sw: X coordinate South-West corner grid cell y_sw: Y coordinate South-West corner grid cell f_staat: State area grid cell square meters f_land: Land area grid cell square meters f_wasser: Water area grid cell square meters p_staat: Share state area grid cell p_land: Share land area grid cell p_wasser: Share water area grid cell ags: Official municipality key (Amtlicher Gemeindeschlu00fcssel). Related ARS shortened omit position 6 9. Structured follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-8: Municipality Note ags included resolutions \"100m\" \"250m\"","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"INSPIRE grids — bkg_grid","text":"following table gives rough idea much less data bkg_grid_fast needs download resolution compared bkg_grid_full.","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"INSPIRE grids — bkg_grid","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Return a bare-bones version of the INSPIRE grid grid <- bkg_grid_fast(year = \"2019\", resolution = \"100km\")  # Return a fully detailed version instead grid_full <- bkg_grid_full(resolution = \"5km\")  plot(grid)  # Convert grid to SpatRaster if (requireNamespace(\"terra\")) {   library(terra)   raster <- rast(vect(grid_full[\"p_wasser\"]), type = \"xyz\")   plot(raster, main = \"Share of water area\") } }"},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":null,"dir":"Reference","previous_headings":"","what":"Heliports — bkg_heliports","title":"Heliports — bkg_heliports","text":"Get heliports Germany. Based data third-party providers image classification aerial imagery.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heliports — bkg_heliports","text":"","code":"bkg_heliports(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heliports — bkg_heliports","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heliports — bkg_heliports","text":"dataframe following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name code: Identifier heliport name_bkg: Name landing site according BKG name_dfs: Name landing size according Deutsche Flugsicherung (DFS) airport_pk: Identifier according LFS aviation manual befestigun: Pavement type landing site. Can : befestigt: paved teilweise befestigt: partially paved unbefestigt: unpaved kennzeich: Marking landing size. Can : gekennzeichnet: marked nicht gekennzeichnet: marked lage: Location landing size. Can : D: Roof F: Field PG: Platform next hospital W: Pasture LP: Landing site PP: Parking lot LP / W: Paved landing size pasture F / W: Field pasture LP / Str.: Landing size next street typ: Type heliport. Can : H: Heliport HH: Heliport hospital MH: Military heliport typ2: Additional heliport type landing sites air rescue station. Can : HRLS: Helicopter air rescue station ITH: Intensive transport helicopter betreiber: Operator heliport helikopter: Name helicopter belonging air rescue station status: Whether point geometry edited BKG. Can : Original: edited Verschoben: moved neu: newly added quelle: Source information. Can : BKG: research BKG DFS-Liste: Provided DFS LBA-Liste: Provided Federal Aviation Office (LBA) MHW: Provided Medical Disaster Relief Organization (MHW) RTH.Info: Provided rth.info","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Heliports — bkg_heliports","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heliports — bkg_heliports","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get only military heliports bkg_heliports(typ == \"MH\")  # Get only rooftop heliports bkg_heliports(lage == \"D\") }"},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":null,"dir":"Reference","previous_headings":"","what":"Vehicle registration plates — bkg_kfz","title":"Vehicle registration plates — bkg_kfz","text":"Retrieve motor vehicle registration plate regions Germany. Registration plate regions discerned area code (Unterscheidungszeichen) indicate place vehicle registered. regions partially overlap districts entirely identical. function interfaces wfs_kfz250 product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vehicle registration plates — bkg_kfz","text":"","code":"bkg_kfz(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vehicle registration plates — bkg_kfz","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vehicle registration plates — bkg_kfz","text":"sf dataframe multipolygon geometries following columns: debkgid: Identifier digital landscape model DLM250 nnid: National name identifier name: Name geographical object ars: Territorial code (Amtlicher Regionalschlu00fcssel). ARS stuctured hierarchically follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-9: Administrative association Position 10-12: Municipality oba: Name ATKIS object type kfz: Vehicle registration area code, comma-separated case multiple codes geola: Geographical longitude geobr: Geographical latitude gkre: Gauu00df-Kru00fcger easting gkho: Gauu00df-Kru00fcger northing utmre: UTM easting utmho: UTM northing","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vehicle registration plates — bkg_kfz","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() && requireNamespace(\"ggplot2\") library(ggplot2)  kfz <- bkg_kfz(ars %LIKE% \"053%\") ggplot(kfz) +   geom_sf(fill = NA) +   geom_sf_text(aes(label = kfz)) +   theme_void() }"},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":null,"dir":"Reference","previous_headings":"","what":"Kilometrage — bkg_kilometrage","title":"Kilometrage — bkg_kilometrage","text":"Get kilometrages German federal motorways. Kilometrages markers kilometer highway. can used create linear referencing systems (LRS).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kilometrage — bkg_kilometrage","text":"","code":"bkg_kilometrage(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kilometrage — bkg_kilometrage","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kilometrage — bkg_kilometrage","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name bez: Label federal motorway kilometer: Kilometrage motorway richtung: Direction kilometrage","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Kilometrage — bkg_kilometrage","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kilometrage — bkg_kilometrage","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get the kilometrage of the A2 motorway a2 <- bkg_kilometrage(bez == \"A2\") plot(a2[\"kilometer\"], pch = 16) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":null,"dir":"Reference","previous_headings":"","what":"NUTS regions — bkg_nuts","title":"NUTS regions — bkg_nuts","text":"Retrieve polygons NUTS regions. function interfaces nuts* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NUTS regions — bkg_nuts","text":"","code":"bkg_nuts(   level = c(\"1\", \"2\", \"3\"),   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   key_date = c(\"0101\", \"1231\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NUTS regions — bkg_nuts","text":"level NUTS level download. Can \"1\" (federal states), \"2\" (inconsistent, something states government regions), \"3\" (districts). Defaults federal states. scale Scale geometries. Can \"250\" (1:250,000), \"1000\" (1:1,000,000), \"2500\" (1:2,500,000) \"5000\" (1:5,000,000). \"250\", population data included output. Defaults \"250\". key_date resolution %% c(\"250\", \"5000\"), specifies key date download administrative data. Can either \"0101\" (January 1) \"1231\" (December 31). latter able georeference statistical data first integrates changes made new year. \"1231\", population data attached, otherwise . Note population data available scales (usually 250 1000). Defaults \"0101\". year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NUTS regions — bkg_nuts","text":"sf dataframe multipolygon geometries following columns: GF: Integer representing geofactor; whether area \"structured\" . Land structured part state administrative unit divided administrative units. Can one 1: Unstructured, waterbody 2: Structured, waterbody 3: Unstructured, land 4: Structured, land NUTS_LEVEL: NUTS level. Can one 1: NUTS-1; federal states 2: NUTS-2; inconsistent, somewhere government regions federal states 3: NUTS-3; districts NUTS_CODE: Hierarchical key NUTS region. Can different number characters depending NUTS level: NUTS-1: three digits NUTS-2: four digits NUTS-3: five digits NUTS_NAME: Geographical name NUTS region","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NUTS regions — bkg_nuts","text":"function query WFS able download entire datasets without ability filter beforehand.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NUTS regions — bkg_nuts","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Download NUTS state data from 2020 bkg_nuts(scale = \"5000\", year = 2020)  # Download the latest NUTS district data bkg_nuts(level = \"3\") }"},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Quasigeoid — bkg_quasigeoid","title":"Quasigeoid — bkg_quasigeoid","text":"Retrieves \"German Combined Quasigeoid\", official height reference surface German land survey reference ellipsoid (GRS80). quasigeoid approximation geoid surface used define normal heights earth's surface based practical assumptions true geoid. defines heights meters can meaningful ellipsoidal heights many applications like surveying, hydrological modeling, engineering, spatial analysis. function interfaces quasigeoid product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quasigeoid — bkg_quasigeoid","text":"","code":"bkg_quasigeoid(   year = \"latest\",   region = c(\"all\", \"coast\", \"no\", \"nw\", \"s\", \"w\"),   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quasigeoid — bkg_quasigeoid","text":"year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. region Subterritory Germany. \"\" returns data Germany, \"coast\" returns coastal regions \"\", \"nw\", \"s\" \"w\" refer cardinal directions. Defaults \"\". timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quasigeoid — bkg_quasigeoid","text":"SpatRaster containing normal heights specified region. data comes EPSG:4258 resolution 30\" x 45\" (approximately 0.9 x 0.9 km).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quasigeoid — bkg_quasigeoid","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() && rlang::is_installed(\"terra\") library(terra) qgeoid <- bkg_quasigeoid(region = \"no\") terra::plot(qgeoid) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-administrative regions — bkg_ror","title":"Non-administrative regions — bkg_ror","text":"Retrieve areal data related BKG calls non-administrative regions. includes: bkg_ror: Raumordnungsregionen (Spatial planning regions) bkg_rg: Reisegebiete (Travel areas) bkg_amr: Arbeitsmarktregionen (Labor market regions) bkg_bkr: Braunkohlereviere (Lignite regions) bkg_krg: Kreisregionen (District regions) bkg_mbe: BBSR Mittelbereiche (BBSR middle areas) bkg_ggr: Großstadtregionen (City regions) bkg_kmr: Metropolregionen (Metropolitan regions) bkg_mkro: Verdichtungsräume (Conurbations) functions interface ge* product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-administrative regions — bkg_ror","text":"","code":"bkg_ror(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_rg(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_amr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_bkr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_krg(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_mbe(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_ggr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_kmr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_mkro(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-administrative regions — bkg_ror","text":"scale Scale geometries. Can \"250\" (1:250,000), \"1000\" (1:1,000,000), \"2500\" (1:2,500,000) \"5000\" (1:5,000,000). \"250\", population data included output. Defaults \"250\". year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-administrative regions — bkg_ror","text":"sf tibble multipolygon geometries two features, regional identifier region endonyms.","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":null,"dir":"Reference","previous_headings":"","what":"Seaports — bkg_seaports","title":"Seaports — bkg_seaports","text":"Retrieve seaports North Baltic Sea Northern Germany.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seaports — bkg_seaports","text":"","code":"bkg_seaports(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seaports — bkg_seaports","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seaports — bkg_seaports","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name poi_id: Unique primary key point interest betreiber: Operator seaport homepage: Homepage operator typ: Type seaport. Can \"Seehafen\" (seaport) \"See- und Binnenhafen\" (sea inland port) art: Type seaport freight. Can : Güter: Goods Güter und Passagiere: Goods passengers Passagiere: Passengers quelle: Source information. Can : BSH: Federal Maritime Hydrographic Agency MarWiLo: Maritime Wirtschaft & Logistik ZDS-Seehäfen: Zentralverband der deutschen Seehafenbetriebe","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Seaports — bkg_seaports","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seaports — bkg_seaports","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get only seaports that co-function as inland ports ports <- bkg_seaports(typ == \"See- und Binnenhafen\") germany <- bkg_admin(level = \"sta\", scale = \"5000\", gf == 9) plot(germany$geometry) plot(ports$geometry, add = TRUE) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Stations and stops — bkg_stations","title":"Stations and stops — bkg_stations","text":"Retrieve data public transport stations stops Germany. Stations stops hierarchical. means stations represent structural facilities hierarchically superior objects stops hierarchically inferiors parts station (e.g., single platform bus stop).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stations and stops — bkg_stations","text":"","code":"bkg_stations(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stations and stops — bkg_stations","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stations and stops — bkg_stations","text":"dataframe following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name stop_id: Identifier station stop parent_st: Identifier parent station applicable verkehrsm: Vehicle used station, comma-separated sorted alphabetically art: Hierarchical position station. Can : Station: physical structure hierarchically superior Haltestelle: Part structure hierarchically inferior tag_f_awo: Mean departures per day work week tag_f_wo: Mean departures per day full week","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Stations and stops — bkg_stations","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stations and stops — bkg_stations","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get all long-distance train stations bkg_stations(verkehrsm %LIKE% \"%Fernzug%\", art == \"Station\")  # Get all platforms of long-distance train stations bkg_stations(verkehrsm %LIKE% \"%Fernzug%\", art == \"Haltestelle\")  # Get all stops with high traffic bkg_stations(tag_f_awo > 1000, art == \"Station\")  # Get all bus stops with low traffic bkg_stations(tag_f_awo < 1, verkehrsm %LIKE% \"%Bus%\", art == \"Station\") }"},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":null,"dir":"Reference","previous_headings":"","what":"Trauma centers — bkg_trauma_centers","title":"Trauma centers — bkg_trauma_centers","text":"Retrieve data trauma centers Germany. trauma center hospital certified German Society Trauma Surgery (DGU) able provide maximum care heavily injured people. Trauma centers organized hierarchical regional network ranges local transregional centers.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trauma centers — bkg_trauma_centers","text":"","code":"bkg_trauma_centers(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trauma centers — bkg_trauma_centers","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trauma centers — bkg_trauma_centers","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name poi_id: Unique primary key point interest tz_nummer: Unique primary key trauma center strasse: Street hn: House number plz: Zip code ort: Place name netwerk: Name regional trauma center network abteilung: Name medical department typ: Type trauma center. Can : LTZ: local trauma center RTZ: regional trauma center ÜTZ: transregional trauma center","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Trauma centers — bkg_trauma_centers","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trauma centers — bkg_trauma_centers","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Get only trauma centers specializing on orthopedics bkg_trauma_centers(abteilung %LIKE% \"%orthopäd%\")  # Get only local trauma centers bkg_trauma_centers(typ == \"LTZ\")  if (requireNamespace(\"ggplot2\")) {   library(ggplot2)   centers <- bkg_trauma_centers()   ggplot() +   geom_sf(     data = centers[centers$typ %in% \"LTZ\",],     size = 1,     color = \"lightblue1\"   ) +   geom_sf(     data = centers[centers$typ %in% \"RTZ\",],     size = 2,     color = \"lightblue3\"   ) +   geom_sf(     data = centers[centers$typ %in% \"ÜTZ\",],     size = 3,     color = \"lightblue4\"   ) +   theme_void() } }"},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":null,"dir":"Reference","previous_headings":"","what":"BKG WCS — bkg_wcs","title":"BKG WCS — bkg_wcs","text":"Low-level interface BKG-style web coverage services (WCS). function used high-level functions ffm depend WCS, e.g., bkg_dem.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BKG WCS — bkg_wcs","text":"","code":"bkg_wcs(   coverage_id,   endpoint = coverage_id,   version = \"2.0.1\",   method = NULL,   format = \"image/tiff;application=geotiff\",   epsg = 3035,   interpolation = NULL,   ... )"},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BKG WCS — bkg_wcs","text":"coverage_id Coverage ID. doubt, inspect GetCapabilities service. endpoint Endpoint interface. Note wcs_ appended rest product name must provided. example, wcs_dgm200_inspire becomes dgm200_inspire. Defaults value coverage_id. version Service version WCS. Defaults 2.0.1. method HTTP method use request. GET requests provide parameters using URL queries. Filters must provided CQL queries. less error-prone, allows maximum number 2048 characters. Especially providing sophisticated spatial queries, GET queries simply accepted services. cases makes sense use POST requests instead. NULL, method inferred type filter query provided filter (either XML CQL). filter provided, method inferred getOption(\"ffm_query_language\"). format Content type output. value heavily depends endpoint queried. Defaults \"image/tiff;application=geotiff\". epsg Numeric value giving EPSG identifier coordinate reference system (CRS). EPSG code automatically formatted OGC-compliant manner. Note EPSG codes supported. Inspect GetCapabilities target service find EPSG codes available. Defaults EPSG:3035. interpolation Method used interpolate coverage raster. Allowed methods depend capabilities WCS. ... parameters passed WFS query. case POST requests, additional namespaces may necessary query WFS. Argument names interpreted prefix (e.g. xmlns:wfs) argument values namespace links.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BKG WCS — bkg_wcs","text":"SpatRaster.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BKG WCS — bkg_wcs","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() # Boundaries can be provided using two subset arguments bkg_wcs(   \"dgm200_inspire__EL.GridCoverage\",   endpoint = \"dgm200_inspire\",   subset = \"E(548282,552280)\",   subset = \"N(5800943,5804942)\" ) }"},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":null,"dir":"Reference","previous_headings":"","what":"BKG WFS — bkg_wfs","title":"BKG WFS — bkg_wfs","text":"Low-level interface BKG-style web feature services (WFS). function used high-level functions ffm depend WFS, e.g., bkg_admin. bkg_feature_types lists available feature types given endpoint.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BKG WFS — bkg_wfs","text":"","code":"bkg_wfs(   type_name,   endpoint = type_name,   version = \"2.0.0\",   method = NULL,   format = \"application/json\",   layer = NULL,   epsg = 3035,   properties = NULL,   filter = NULL,   ... )  bkg_feature_types(endpoint)"},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BKG WFS — bkg_wfs","text":"type_name Feature type WFS retrieve. can use bkg_feature_types retrieve list feature type names given endpoint. endpoint Endpoint interface. Note wfs_ appended rest product name must provided. example, wfs_vg250 becomes vg250. Defaults value type_name. version Service version WFS. Usually 2.0.0, services still use 1.0.0 1.1.0. method HTTP method use request. GET requests provide parameters using URL queries. Filters must provided CQL queries. less error-prone, allows maximum number 2048 characters. Especially providing sophisticated spatial queries, GET queries simply accepted services. cases makes sense use POST requests instead. NULL, method inferred type filter query provided filter (either XML CQL). filter provided, method inferred getOption(\"ffm_query_language\"). format Content type output. value heavily depends endpoint queried. services allow application/json support GML outputs. doubt, inspect GetCapabilities target service. Defaults \"application/json\". layer format specifies GML output, layer specifies layer downloaded GML file read. necessary GML file actually contains multiple layers. Defaults NULL. epsg Numeric value giving EPSG identifier coordinate reference system (CRS). EPSG code automatically formatted OGC-compliant manner. Note EPSG codes supported. Inspect GetCapabilities target service find EPSG codes available. Defaults EPSG:3035. properties Names columns include output. Defaults NULL (columns). filter WFS filter query (CQL XML) created wfs_filter. ... parameters passed WFS query. case POST requests, additional namespaces may necessary query WFS. Argument names interpreted prefix (e.g. xmlns:wfs) argument values namespace links.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BKG WFS — bkg_wfs","text":"sf tibble","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BKG WFS — bkg_wfs","text":"","code":"if (FALSE) { # getFromNamespace(\"ffm_run_examples\", ns = \"ffm\")() bkg_feature_types(\"vg5000_0101\")  bkg_wfs(   \"vg5000_lan\",   endpoint = \"vg5000_0101\",   count = 5,   properties = \"gen\",   epsg = 4326 )[-1]  # Filters are created using `wfs_filter()` bkg_wfs(   \"vg5000_krs\",   endpoint = \"vg5000_0101\",   properties = \"gen\",   filter = wfs_filter(sn_l == 10) )[-1] }"},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"WFS filters — wfs_filter","title":"WFS filters — wfs_filter","text":"Utility functions construct XML CQL queries. functions backend filter argument filter capabilities ffm functions interact WFS (e.g., bkg_admin, bkg_clc bkb_geonames).","code":""},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WFS filters — wfs_filter","text":"","code":"wfs_filter(   ...,   filter = NULL,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   geom_property = \"geom\",   default_crs = 25832,   lang = NULL )"},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WFS filters — wfs_filter","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". geom_property Name geometry property included WFS. cases, \"geom\", exceptions. default_crs WFS defines default CRS coordinates spatial filtering provided. BKG services, usually EPSG:25832. sf objects provided bbox poly first transformed CRS creating query. lang Query language use constructing query. One \"cql\" \"xml\". default, almost ffm functions use CQL simpler less prone errors. However, CQL limited terms query size. Especially providing poly, URLs can become long WFS server decline . XML can valid alternative construct large queries. Additionally, services like one used bkg_geonames support XML. NULL, defaults getOption(\"ffm_query_language\").","code":""},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WFS filters — wfs_filter","text":"CQL query XML query depending lang argument.","code":""},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WFS filters — wfs_filter","text":"","code":"# CQL and XML support mostly the same things wfs_filter(ags %LIKE% \"05%\", lang = \"cql\") #> ags LIKE '05%'  wfs_filter(ags %LIKE% \"05%\", lang = \"xml\") #> <fes:Filter> #>   <fes:PropertyIsLike wildCard=\"%\" singleChar=\"_\" escapeChar=\"\\\"> #>     <fes:ValueReference>ags<\/fes:ValueReference> #>     <fes:Literal>05%<\/fes:Literal> #>   <\/fes:PropertyIsLike> #> <\/fes:Filter>  bbox <- c(xmin = 5, ymin = 50, xmax = 7, ymax = 52) wfs_filter(bbox = bbox, lang = \"cql\") #> intersects(geom, POLYGON ((5 50, 7 50, 7 52, 5 52, 5 50)))  wfs_filter(bbox = bbox, lang = \"xml\") #> <fes:Filter> #>   <fes:Intersects> #>     <fes:ValueReference>geom<\/fes:ValueReference> #>     <gml:Polygon srsName=\"urn:ogc:def:crs:EPSG::25832\" gml:id=\"file1f9924a0f1b.geom.0\"> #>       <gml:exterior> #>         <gml:LinearRing> #>           <gml:posList>5 50 7 50 7 52 5 52 5 50<\/gml:posList> #>         <\/gml:LinearRing> #>       <\/gml:exterior> #>     <\/gml:Polygon> #>   <\/fes:Intersects> #> <\/fes:Filter>  # Using `filter`, more complex queries can be built wfs_filter(ars %LIKE% \"%0\", filter = \"regierungs NOT IS NULL\") #> ars LIKE '%0' AND regierungs NOT IS NULL   wfs_filter(   filter = \"<fes:Not>     <fes:PropertyIsNull>       <fes:ValueReference>aussprache<\/fes:ValueReference>     <\/fes:PropertyIsNull>   <\/fes:Not>\",   lang = \"xml\" ) #> <fes:Filter> #>   <fes:Not> #>     <fes:PropertyIsNull> #>       <fes:ValueReference>aussprache<\/fes:ValueReference> #>     <\/fes:PropertyIsNull> #>   <\/fes:Not> #> <\/fes:Filter>"}]
