[{"path":"https://jslth.github.io/ffm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ffm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jslth.github.io/ffm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonas Lieth. Author, maintainer.           0000-0002-3451-3176","code":""},{"path":"https://jslth.github.io/ffm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lieth J (2025). ffm: Download Official Spatial Data Germany. R package version 0.1.0.","code":"@Manual{,   title = {ffm: Download Official Spatial Data from Germany},   author = {Jonas Lieth},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"https://jslth.github.io/ffm/index.html","id":"ffm-","dir":"","previous_headings":"","what":"Download Official Spatial Data from Germany","title":"Download Official Spatial Data from Germany","text":"{ffm} R package provides quick easy access data geodata center Germany’s Federal Agency Cartography Geodesy (BKG). BKG official provider spatial data Germany provides quite datasets open data. data range administrative areas earth observation data often crucial working regional statistics Germany. Part motivation package stems frustration working areal identifiers returned packages like {wiesbaden} restatis able quickly link spatial representations. name ffm based colloquial short name Frankfurt Main BKG’s headquarters located.","code":""},{"path":"https://jslth.github.io/ffm/index.html","id":"gallery","dir":"","previous_headings":"","what":"Gallery","title":"Download Official Spatial Data from Germany","text":"following examples created using {ffm}. can see code examples/ directory.","code":""},{"path":"https://jslth.github.io/ffm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download Official Spatial Data from Germany","text":"can install development version ffm GitHub :","code":"# install.packages(\"pak\") pak::pak(\"jslth/ffm\")"},{"path":"https://jslth.github.io/ffm/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Download Official Spatial Data from Germany","text":"Retrieving data pretty straightforward:  package makes easy go deeper just getting data. many functions, can use spatial filters.  Attribute filters supported using R-like syntax.","code":"library(ffm) districts <- bkg_admin(level = \"krs\", scale = \"5000\") library(ggplot2)  ggplot(districts) +   geom_sf(fill = NA) +   theme_void() districts <- bkg_admin(   level = \"krs\",   scale = \"5000\",   bbox = c(xmin = 700000, ymin = 5900000, xmax = 850000, ymax = 6000000),   predicate = \"intersects\" ) districts$label <- ifelse(   districts$bez == \"Kreisfreie Stadt\",   paste(\"Stadt\", districts$gen),   districts$gen ) library(ggrepel)  ggplot(districts) +   geom_sf(fill = NA) +   geom_text_repel(     aes(label = label, geometry = geometry),     stat = \"sf_coordinates\",     size = 3   ) +   theme_void() munics <- bkg_admin(   level = \"gem\",   key_date = \"1231\",   sn_l %in% c(\"08\", \"09\") ) munics$popdens <- munics$ewz / munics$kfl munics$popdens[munics$popdens == 0] <- NA ggplot(munics) +   geom_sf(aes(fill = popdens), color = NA) +   scale_fill_viridis_b(\"Population / km²\", transform = \"log10\") +   ggtitle(\"Population density in Southern Germany\") +   theme_void()"},{"path":[]},{"path":"https://jslth.github.io/ffm/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Download Official Spatial Data from Germany","text":"{giscoR} retrieving EU geodata (also including Germany) {bonn} retrieving German areal indicators official identifiers {restatis} {wiesbaden} retrieving regional statistics Germany {z22} retrieving gridded German census data {rdwd} retrieving German weather climate data","code":""},{"path":"https://jslth.github.io/ffm/index.html","id":"copyright-notice","dir":"","previous_headings":"","what":"Copyright notice","title":"Download Official Spatial Data from Germany","text":"BKG geodata provided free charge remains copyrighted subject BKG licensing. licensed German Open Data license dl-de/-2-0 can used commercially non-commercially attribution. incorporating BKG geodata, please include following attribution. Update year match data acquisition data keep links intact. data modified: © BKG (date last access) dl-de/-2-0 (data edited) modified: © BKG (date last access) dl-de/-2-0 summary based BKG copyright notice","code":""},{"path":"https://jslth.github.io/ffm/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Download Official Spatial Data from Germany","text":"package independent project affiliated , endorsed , officially connected Federal Agency Cartography Geodesy (Bundesamt für Kartographie und Geodäsie, BKG) way. references data, services, resources provided BKG informational purposes .","code":""},{"path":"https://jslth.github.io/ffm/reference/admin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"German administrative boundaries — admin_data","title":"German administrative boundaries — admin_data","text":"Three sf dataframes containing geometries German districts, federal states, country, respectively. reference year 2023.","code":""},{"path":"https://jslth.github.io/ffm/reference/admin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German administrative boundaries — admin_data","text":"","code":"bkg_krs  bkg_states  bkg_germany"},{"path":"https://jslth.github.io/ffm/reference/admin_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"German administrative boundaries — admin_data","text":"dataframe format, see bkg_admin. object class sf (inherits tbl_df, tbl, data.frame) 25 rows 25 columns. object class sf (inherits tbl_df, tbl, data.frame) 7 rows 25 columns.","code":""},{"path":"https://jslth.github.io/ffm/reference/admin_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"German administrative boundaries — admin_data","text":"© BKG (2025) dl-de/-2-0, data sources: https://sgx.geodatenzentrum.de/web_public/gdz/datenquellen/Datenquellen_vg_nuts.pdf","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/admin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"German administrative boundaries — admin_data","text":"","code":"bkg_krs #> Simple feature collection with 400 features and 24 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4031295 ymin: 2684102 xmax: 4672497 ymax: 3551313 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 400 × 25 #>    objid      beginn       ade    gf   bsg ars   ags   sdv_ars gen   bez     ibz #>    <chr>      <date>     <int> <int> <int> <chr> <chr> <chr>   <chr> <chr> <int> #>  1 DEBKGVG50… 2019-10-03     4     9     1 01001 01001 010010… Flen… Krei…    40 #>  2 DEBKGVG50… 2019-10-03     4     9     1 01002 01002 010020… Kiel  Krei…    40 #>  3 DEBKGVG50… 2019-10-03     4     9     1 01003 01003 010030… Lübe… Krei…    40 #>  4 DEBKGVG50… 2019-10-03     4     9     1 01004 01004 010040… Neum… Krei…    40 #>  5 DEBKGVG50… 2019-10-03     4     9     1 01051 01051 010510… Dith… Kreis    42 #>  6 DEBKGVG50… 2021-06-19     4     9     1 01053 01053 010530… Herz… Kreis    42 #>  7 DEBKGVG50… 2019-10-03     4     9     1 01054 01054 010540… Nord… Kreis    42 #>  8 DEBKGVG50… 2019-10-03     4     9     1 01055 01055 010550… Osth… Kreis    42 #>  9 DEBKGVG50… 2019-10-03     4     9     1 01056 01056 010560… Pinn… Kreis    42 #> 10 DEBKGVG50… 2019-10-03     4     9     1 01057 01057 010570… Plön  Kreis    42 #> # ℹ 390 more rows #> # ℹ 14 more variables: bem <chr>, nbd <chr>, sn_l <chr>, sn_r <chr>, #> #   sn_k <chr>, sn_v1 <chr>, sn_v2 <chr>, sn_g <chr>, fk_s3 <chr>, nuts <chr>, #> #   ars_0 <chr>, ags_0 <chr>, wsk <date>, geometry <MULTIPOLYGON [m]>"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":null,"dir":"Reference","previous_headings":"","what":"Administrative areas — bkg_admin","title":"Administrative areas — bkg_admin","text":"Retrieve polygon geometries administrative areas Germany. administrative levels supported different spatial resolutions. bkg_admin interfaces WFS allows prefiltering provides historical data allows maximum scale 1:250,000. bkg_admin_archive allows access historical data prefiltering. bkg_admin_highres (vg25) allows access high-resolution data going low 1:25,000 allows prefiltering. functions interface vg* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Administrative areas — bkg_admin","text":"","code":"bkg_admin(   ...,   level = \"krs\",   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   key_date = c(\"0101\", \"1231\"),   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   allow_local = TRUE,   max = NULL )  bkg_admin_archive(   level = \"krs\",   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   key_date = c(\"0101\", \"1231\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_admin_highres(   level = \"krs\",   year = \"latest\",   layer = NULL,   timeout = 600,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Administrative areas — bkg_admin","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. level Administrative level download. Must one \"sta\" (Germany), \"lan\" (federal states), \"rbz\" (governmental districts), \"krs\" (districts), \"vwg\" (administrative associations), \"gem\" (municipalities), \"li\" (boundary lines), \"pk\" (municipality centroids). Defaults districts. scale Scale geometries. Can \"250\" (1:250,000), \"1000\" (1:1,000,000), \"2500\" (1:2,500,000) \"5000\" (1:5,000,000). \"250\", population data included output. Defaults \"250\". key_date resolution %% c(\"250\", \"5000\"), specifies key date download administrative data. Can either \"0101\" (January 1) \"1231\" (December 31). latter able georeference statistical data first integrates changes made new year. \"1231\", population data attached, otherwise . Note population data available scales (usually 250 1000). Defaults \"0101\". bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. allow_local TRUE, allows special datasets loaded locally. FALSE, always downloads internet. bkg_admin, datasets admin_data can loaded. applies scale = \"5000\", key_date = \"1231\", level %% c(\"krs\", \"sta\", \"lan\"). max Maximum number results return. year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible. layer vg25 product used bkg_admin_highres contains couple metadata files. can set layer name read files, otherwise main file read.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Administrative areas — bkg_admin","text":"sf dataframe multipolygon geometries different columns depending geometry type. Areal geometries generally following columns: objid: Unique object identifier beginn: Creation object DLM ade: Integer representing administrative level. Can one 1: Germany 2: Federal state 3: Governmental district 4: District 5: Administrative association 6: Municipality gf: Integer representing geofactor; whether area \"structured\" . Land structured part state administrative unit divided administrative units. Can one 1: Unstructured, waterbody 2: Structured, waterbody 3: Unstructured, land 4: Structured, land bsg: Special areas, can 1 (Germany) 9 (Lake Constance) ars: Territorial code (Amtlicher Regionalschlu00fcssel). ARS stuctured hierarchically follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-9: Administrative association Position 10-12: Municipality ags: Official municipality key (Amtlicher Gemeindeschlu00fcssel). Related ARS shortened omit position 6 9. Structured follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-8: Municipality sdv_ars: ARS seat administration gen: Geographical name bez: Label administrative unit ibz: Identifier label bem: Comment label nbd: Formation geographical name. Can \"ja\" label part name \"nein\" otherwise. nuts: NUTS identifier based Eurostat regional classification ars_0: ARS identifier trailing zeroes ags_0: AGS identifier trailing zeroes wsk: Legally relevant date effectiveness administrative changes sn_l: Federal state component ARS sn_r: Governmental district component ARS sn_k: District component ARS sn_v1: First part administrative association component ARS sn_v2: Second part administrative association component ARS sn_g: Municipality component ARS fk_3: Purpose third key position. \"R\", indicates government region, \"K\", indicates district dkm_id: Identifier digital landscape model (DLM250) ewz: Number inhabitants kfl: Land register area square kilometers Boundary geometries (\"li\") can additional columns: agz: Type border. Can one 1: National border 2: State border 3: Governmental district border 4: District border 5: Administrative association border 6: Municipality border 9: Coastline rdg: Legal definition border. Can 1 (determined), 2 (determined) 9 (coastline) gm5: Border characteristic administrative association borders (AGZ 5). Used describe purpose borders. Can 0 (characteristics AGZ) 8 (non-association border) gmk: Border characteristic coast/ocean. Specifies whether border runs long waterbody. Can one 7: borders ocean 8: auxiliary borders ocean 9: borders coastline 0: characteristics dlm_id: Identifier digital landscape model (DLM250) Point geometries (\"pk\") following additional columns: otl: Name locality digital landscale model (DLM250) lon_dez: Decimal longitude lat_dez: Decimal latitude lon_gms: Geographical longitude lat_gms: Geographical latitude","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Administrative areas — bkg_admin","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_admin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Administrative areas — bkg_admin","text":"","code":"# You can use R-like operators to query the WFS bkg_admin(ags %LIKE% \"05%\") # districts in NRW #> Simple feature collection with 53 features and 25 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4031313 ymin: 3029642 xmax: 4283898 ymax: 3269981 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 53 × 26 #>    objid      beginn       ade    gf   bsg ars   ags   sdv_ars gen   bez     ibz #>    <chr>      <date>     <int> <int> <int> <chr> <chr> <chr>   <chr> <chr> <int> #>  1 DEBKGVG20… 2024-04-03     4     4     1 05111 05111 051110… Düss… Krei…    40 #>  2 DEBKGVG20… 2024-04-03     4     4     1 05112 05112 051120… Duis… Krei…    40 #>  3 DEBKGVG20… 2024-04-03     4     4     1 05113 05113 051130… Essen Krei…    40 #>  4 DEBKGVG20… 2024-04-03     4     4     1 05114 05114 051140… Kref… Krei…    40 #>  5 DEBKGVG20… 2020-03-09     4     4     1 05116 05116 051160… Mönc… Krei…    40 #>  6 DEBKGVG20… 2024-04-03     4     4     1 05117 05117 051170… Mülh… Krei…    40 #>  7 DEBKGVG20… 2022-12-19     4     4     1 05119 05119 051190… Ober… Krei…    40 #>  8 DEBKGVG20… 2024-04-03     4     4     1 05120 05120 051200… Rems… Krei…    40 #>  9 DEBKGVG20… 2020-11-17     4     4     1 05122 05122 051220… Soli… Krei…    40 #> 10 DEBKGVG20… 2024-04-03     4     4     1 05124 05124 051240… Wupp… Krei…    40 #> # ℹ 43 more rows #> # ℹ 15 more variables: bem <chr>, nbd <chr>, sn_l <chr>, sn_r <chr>, #> #   sn_k <chr>, sn_v1 <chr>, sn_v2 <chr>, sn_g <chr>, fk_s3 <chr>, nuts <chr>, #> #   ars_0 <chr>, ags_0 <chr>, wsk <date>, dlm_id <chr>, #> #   geometry <MULTIPOLYGON [m]> bkg_admin(sn_l == \"05\") # does the same thing #> Simple feature collection with 53 features and 25 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4031313 ymin: 3029642 xmax: 4283898 ymax: 3269981 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 53 × 26 #>    objid      beginn       ade    gf   bsg ars   ags   sdv_ars gen   bez     ibz #>    <chr>      <date>     <int> <int> <int> <chr> <chr> <chr>   <chr> <chr> <int> #>  1 DEBKGVG20… 2024-04-03     4     4     1 05111 05111 051110… Düss… Krei…    40 #>  2 DEBKGVG20… 2024-04-03     4     4     1 05112 05112 051120… Duis… Krei…    40 #>  3 DEBKGVG20… 2024-04-03     4     4     1 05113 05113 051130… Essen Krei…    40 #>  4 DEBKGVG20… 2024-04-03     4     4     1 05114 05114 051140… Kref… Krei…    40 #>  5 DEBKGVG20… 2020-03-09     4     4     1 05116 05116 051160… Mönc… Krei…    40 #>  6 DEBKGVG20… 2024-04-03     4     4     1 05117 05117 051170… Mülh… Krei…    40 #>  7 DEBKGVG20… 2022-12-19     4     4     1 05119 05119 051190… Ober… Krei…    40 #>  8 DEBKGVG20… 2024-04-03     4     4     1 05120 05120 051200… Rems… Krei…    40 #>  9 DEBKGVG20… 2020-11-17     4     4     1 05122 05122 051220… Soli… Krei…    40 #> 10 DEBKGVG20… 2024-04-03     4     4     1 05124 05124 051240… Wupp… Krei…    40 #> # ℹ 43 more rows #> # ℹ 15 more variables: bem <chr>, nbd <chr>, sn_l <chr>, sn_r <chr>, #> #   sn_k <chr>, sn_v1 <chr>, sn_v2 <chr>, sn_g <chr>, fk_s3 <chr>, nuts <chr>, #> #   ars_0 <chr>, ags_0 <chr>, wsk <date>, dlm_id <chr>, #> #   geometry <MULTIPOLYGON [m]> bkg_admin(gen %LIKE% \"Ber%\") # districts starting with Ber* #> Simple feature collection with 4 features and 25 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4082950 ymin: 2710124 xmax: 4576603 ymax: 3290780 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 4 × 26 #>   objid beginn       ade    gf   bsg ars   ags   sdv_ars gen   bez     ibz bem   #>   <chr> <date>     <int> <int> <int> <chr> <chr> <chr>   <chr> <chr> <int> <chr> #> 1 DEBK… 2024-04-03     4     4     1 06431 06431 064310… Berg… Land…    43 --    #> 2 DEBK… 2023-10-03     4     4     1 07231 07231 072310… Bern… Land…    43 --    #> 3 DEBK… 2021-12-13     4     4     1 09172 09172 091720… Berc… Land…    43 --    #> 4 DEBK… 2023-10-03     4     4     1 11000 11000 110000… Berl… Krei…    40 --    #> # ℹ 14 more variables: nbd <chr>, sn_l <chr>, sn_r <chr>, sn_k <chr>, #> #   sn_v1 <chr>, sn_v2 <chr>, sn_g <chr>, fk_s3 <chr>, nuts <chr>, ars_0 <chr>, #> #   ags_0 <chr>, wsk <date>, dlm_id <chr>, geometry <MULTIPOLYGON [m]>  # To query population and area, the key date must be December 31 bkg_admin(ewz > 500000, key_date = \"1231\") # districts over 500k people #> Simple feature collection with 21 features and 27 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4037375 ymin: 2773147 xmax: 4598913 ymax: 3429696 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 21 × 28 #>    objid      beginn       ade    gf   bsg ars   ags   sdv_ars gen   bez     ibz #>    <chr>      <date>     <int> <int> <int> <chr> <chr> <chr>   <chr> <chr> <int> #>  1 DEBKGVG20… 2023-10-03     4     4     1 02000 02000 020000… Hamb… Krei…    40 #>  2 DEBKGVG20… 2023-10-03     4     4     1 03241 03241 032410… Regi… Land…    45 #>  3 DEBKGVG20… 2023-10-03     4     4     1 04011 04011 040110… Brem… Krei…    40 #>  4 DEBKGVG20… 2023-10-03     4     4     1 05111 05111 051110… Düss… Krei…    40 #>  5 DEBKGVG20… 2022-12-19     4     4     1 05112 05112 051120… Duis… Krei…    40 #>  6 DEBKGVG20… 2022-12-19     4     4     1 05113 05113 051130… Essen Krei…    40 #>  7 DEBKGVG20… 2022-12-19     4     4     1 05315 05315 053150… Köln  Krei…    40 #>  8 DEBKGVG20… 2021-09-12     4     4     1 05334 05334 053340… Städ… Kreis    46 #>  9 DEBKGVG20… 2023-10-03     4     4     1 05382 05382 053820… Rhei… Kreis    42 #> 10 DEBKGVG20… 2023-10-03     4     4     1 05562 05562 055620… Reck… Kreis    42 #> # ℹ 11 more rows #> # ℹ 17 more variables: bem <chr>, nbd <chr>, sn_l <chr>, sn_r <chr>, #> #   sn_k <chr>, sn_v1 <chr>, sn_v2 <chr>, sn_g <chr>, fk_s3 <chr>, nuts <chr>, #> #   ars_0 <chr>, ags_0 <chr>, wsk <date>, ewz <int>, kfl <dbl>, dlm_id <chr>, #> #   geometry <MULTIPOLYGON [m]> bkg_admin(kfl <= 100, key_date = \"1231\") # districts with low land register area #> Simple feature collection with 74 features and 27 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4097402 ymin: 2719179 xmax: 4603283 ymax: 3531335 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 74 × 28 #>    objid      beginn       ade    gf   bsg ars   ags   sdv_ars gen   bez     ibz #>    <chr>      <date>     <int> <int> <int> <chr> <chr> <chr>   <chr> <chr> <int> #>  1 DEBKGVG20… 2022-12-19     4     4     1 01001 01001 010010… Flen… Krei…    40 #>  2 DEBKGVG20… 2022-12-19     4     4     1 01004 01004 010040… Neum… Krei…    40 #>  3 DEBKGVG20… 2022-12-19     4     4     1 03401 03401 034010… Delm… Krei…    40 #>  4 DEBKGVG20… 2022-12-19     4     4     1 05117 05117 051170… Mülh… Krei…    40 #>  5 DEBKGVG20… 2022-12-19     4     4     1 05119 05119 051190… Ober… Krei…    40 #>  6 DEBKGVG20… 2019-06-12     4     4     1 05120 05120 051200… Rems… Krei…    40 #>  7 DEBKGVG20… 2020-11-17     4     4     1 05122 05122 051220… Soli… Krei…    40 #>  8 DEBKGVG20… 2021-11-16     4     4     1 05316 05316 053160… Leve… Krei…    40 #>  9 DEBKGVG20… 2022-12-19     4     4     1 05916 05916 059160… Herne Krei…    40 #> 10 DEBKGVG20… 2022-12-19     4     4     1 06413 06413 064130… Offe… Krei…    40 #> # ℹ 64 more rows #> # ℹ 17 more variables: bem <chr>, nbd <chr>, sn_l <chr>, sn_r <chr>, #> #   sn_k <chr>, sn_v1 <chr>, sn_v2 <chr>, sn_g <chr>, fk_s3 <chr>, nuts <chr>, #> #   ars_0 <chr>, ags_0 <chr>, wsk <date>, ewz <int>, kfl <dbl>, dlm_id <chr>, #> #   geometry <MULTIPOLYGON [m]>  # Using `gf == 9`, you can exclude waterbodies like oceans states <- bkg_admin(scale = \"5000\", level = \"lan\", gf == 9) plot(states$geometry)   # Download historical data bkg_admin_archive(scale = \"5000\", level = \"sta\", year = \"2021\") #> Simple feature collection with 7 features and 24 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 280353.1 ymin: 5235878 xmax: 921261.6 ymax: 6106245 #> Projected CRS: ETRS89 / UTM zone 32N #> # A tibble: 7 × 25 #>   OBJID BEGINN       ADE    GF   BSG ARS   AGS   SDV_ARS GEN   BEZ     IBZ BEM   #>   <chr> <date>     <int> <int> <int> <chr> <chr> <chr>   <chr> <chr> <int> <chr> #> 1 DEBK… 2021-06-20     1     9     1 0000… 0000… 110000… Deut… Bund…    10 --    #> 2 DEBK… 2019-10-04     1     8     1 0000… 0000… 110000… Deut… Bund…    10 --    #> 3 DEBK… 2019-10-04     1     8     1 0000… 0000… 110000… Deut… Bund…    10 --    #> 4 DEBK… 2019-10-04     1     8     1 0000… 0000… 110000… Deut… Bund…    10 --    #> 5 DEBK… 2019-10-04     1     8     9 --    --    --      Schw… --        0 --    #> 6 DEBK… 2019-10-04     1     8     9 --    --    --      Öste… --        0 --    #> 7 DEBK… 2019-10-04     1     8     9 0000… 0000… 110000… Deut… Bund…    10 --    #> # ℹ 13 more variables: NBD <chr>, SN_L <chr>, SN_R <chr>, SN_K <chr>, #> #   SN_V1 <chr>, SN_V2 <chr>, SN_G <chr>, FK_S3 <chr>, NUTS <chr>, ARS_0 <chr>, #> #   AGS_0 <chr>, WSK <date>, geometry <MULTIPOLYGON [m]>  if (FALSE) { # \\dontrun{ # Download high-resolution data (takes a long time!) bkg_admin_highres(level = \"lan\") } # }"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Administrative hierarchy — bkg_admin_hierarchy","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"Retrieve polygon geometries municipalities Germany details relationships administrative areas higher levels territorial hierarchy. output functions contains identifiers names NUTS1 NUTS3 areas municipality belongs .","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"","code":"bkg_admin_hierarchy(   key_date = c(\"0101\", \"1231\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"key_date resolution %% c(\"250\", \"5000\"), specifies key date download administrative data. Can either \"0101\" (January 1) \"1231\" (December 31). latter able georeference statistical data first integrates changes made new year. \"1231\", population data attached, otherwise . Note population data available scales (usually 250 1000). Defaults \"0101\". year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"sf tibble multipolygon geometries similar output bkg_admin(level = \"gem\"). tibble additionally contains columns NUTS*_CODE NUTS*_NAME giving identifiers names administrative areas municipalities belong .","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_admin_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Administrative hierarchy — bkg_admin_hierarchy","text":"","code":"bkg_admin_hierarchy() #> Simple feature collection with 11126 features and 28 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 280371.1 ymin: 5235856 xmax: 921292.4 ymax: 6101487 #> Projected CRS: ETRS89 / UTM zone 32N #> # A tibble: 11,126 × 29 #>       GF ARS_G AGS_G GEN_G BEZ_G IBZ_G ARS_V GEN_V BEZ_V IBZ_V ARS_K GEN_K BEZ_K #>    <int> <chr> <chr> <chr> <chr> <int> <chr> <chr> <chr> <int> <chr> <chr> <chr> #>  1     4 0100… 0100… Flen… Stadt    60 0100… Flen… Amts…    80 01001 Flen… Krei… #>  2     4 0100… 0100… Kiel  Stadt    60 0100… Kiel  Amts…    80 01002 Kiel  Krei… #>  3     4 0100… 0100… Lübe… Stadt    60 0100… Lübe… Amts…    80 01003 Lübe… Krei… #>  4     4 0100… 0100… Neum… Stadt    60 0100… Neum… Amts…    80 01004 Neum… Krei… #>  5     4 0105… 0105… Brun… Stadt    61 0105… Brun… Amts…    85 01051 Dith… Kreis #>  6     4 0105… 0105… Heide Stadt    61 0105… Heide Amts…    85 01051 Dith… Kreis #>  7     4 0105… 0105… Aver… Geme…    64 0105… Burg… Amt      50 01051 Dith… Kreis #>  8     4 0105… 0105… Bric… Geme…    64 0105… Burg… Amt      50 01051 Dith… Kreis #>  9     4 0105… 0105… Buch… Geme…    64 0105… Burg… Amt      50 01051 Dith… Kreis #> 10     4 0105… 0105… Burg… Geme…    64 0105… Burg… Amt      50 01051 Dith… Kreis #> # ℹ 11,116 more rows #> # ℹ 16 more variables: IBZ_K <int>, ARS_R <chr>, GEN_R <chr>, BEZ_R <chr>, #> #   IBZ_R <int>, ARS_L <chr>, GEN_L <chr>, BEZ_L <chr>, IBZ_L <int>, #> #   NUTS3_CODE <chr>, NUTS3_NAME <chr>, NUTS2_CODE <chr>, NUTS2_NAME <chr>, #> #   NUTS1_CODE <chr>, NUTS1_NAME <chr>, geometry <MULTIPOLYGON [m]>"},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":null,"dir":"Reference","previous_headings":"","what":"Official keys — bkg_ags","title":"Official keys — bkg_ags","text":"Retrieve geographical names associated official municipality keys regional keys. retrieve polygon geometries, see bkg_admin. functions interface wfs_gnde product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Official keys — bkg_ags","text":"","code":"bkg_ags(..., filter = NULL, properties = NULL, max = NULL)  bkg_ars(..., filter = NULL, properties = NULL, max = NULL)"},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Official keys — bkg_ags","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Official keys — bkg_ags","text":"dataframe containing respective identifier geographical names related state, government region, district municipality. bkg_ars additionally returns name administrative association.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Official keys — bkg_ags","text":"WFS interfaces like bkg_admin allow querying using CQL XML, bkg_ags bkg_ars (using GNDE service) support XML. implications allowed query filters (see wfs_filter).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Official keys — bkg_ags","text":"","code":"# Either get geographical names for identifiers bkg_ars(ars == \"01\") #> # A tibble: 1 × 6 #>   ars   bundesland        regierungsbezirk kreis verwaltungsgemeinsch…¹ gemeinde #>   <chr> <chr>             <chr>            <chr> <chr>                  <chr>    #> 1 01    Schleswig-Holste… NA               NA    NA                     NA       #> # ℹ abbreviated name: ¹​verwaltungsgemeinschaft  # ... or identifiers for geographical names bkg_ars(gemeinde == \"Köln\") #> # A tibble: 1 × 6 #>   ars          bundesland regierungsbezirk kreis verwaltungsgemeinsch…¹ gemeinde #>   <chr>        <chr>      <chr>            <chr> <chr>                  <chr>    #> 1 053150000000 Nordrhein… Köln             Köln  Köln                   Köln     #> # ℹ abbreviated name: ¹​verwaltungsgemeinschaft"},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":null,"dir":"Reference","previous_headings":"","what":"Airports — bkg_airports","title":"Airports — bkg_airports","text":"Retrieve international, regional, special airports Germany. Small landing sites included. functions interface wfs_poi_open product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Airports — bkg_airports","text":"","code":"bkg_airports(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Airports — bkg_airports","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Airports — bkg_airports","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name poi_id: Unique primary key point interest icao_code: ICAO code airport typ: Type airport. Can one following: international: International airport regional: Regional airport Sonderflughafen: Special airport","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Airports — bkg_airports","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_airports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Airports — bkg_airports","text":"","code":"# Get all airports in NRW airports <- bkg_airports(ars %LIKE% \"05%\") nrw <- bkg_admin(level = \"lan\", sn_l == \"05\") plot(nrw$geometry) plot(airports$geometry, add = TRUE, pch = 16)"},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Area code regions — bkg_area_codes","title":"Area code regions — bkg_area_codes","text":"Retrieves area code regions (Vorwahlgebiete) Germany. Area code regions based number registered telephone numbers.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area code regions — bkg_area_codes","text":"","code":"bkg_area_codes(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area code regions — bkg_area_codes","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area code regions — bkg_area_codes","text":"sf dataframe containing polygon geometries area code (vorwahl) associated region.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Area code regions — bkg_area_codes","text":"WFS interfaces like bkg_admin allow querying using CQL XML, bkg_area_codes supports XML. implications allowed query filters (see wfs_filter).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_area_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area code regions — bkg_area_codes","text":"","code":"vorwahlen <- bkg_area_codes(vorwahl %LIKE% \"0215%\") plot(vorwahlen$geometry)"},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":null,"dir":"Reference","previous_headings":"","what":"Regions of authority — bkg_authorities","title":"Regions of authority — bkg_authorities","text":"Retrieve regions administrative responsibility job centers, employment agencies, offices employment agencies, regional directorates Federal Employment Agency well local, regional, higher regional courts. function interfaces wfs_bzb-open product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regions of authority — bkg_authorities","text":"","code":"bkg_authorities(   authority,   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regions of authority — bkg_authorities","text":"authority Type authority retrieve regions responsibility. Must one \"employment_agencies\", \"employment_offices\", \"job_centers\", \"directorates\", \"local_courts\", \"regional_courts\", \"higher_regional_courts\". ... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regions of authority — bkg_authorities","text":"sf tibble multipolygon geometries following columns: id: Identifier authority region dst_id: Identifier authority office uebergeord: Name superior authority name: Name authority","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Regions of authority — bkg_authorities","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_authorities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regions of authority — bkg_authorities","text":"","code":"# Get only local courts that are subordinates of the regional court Cottbus bkg_authorities(   authority = \"local_courts\",   uebergeord %LIKE% \"%Cottbus\",   uebergeord %LIKE% \"Landgericht%\" ) #> Simple feature collection with 5 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4532108 ymin: 3145434 xmax: 4650859 ymax: 3262405 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 5 × 6 #>   id            dest_ge_nr mjbw_ge_nr uebergeord name                   geometry #>   <chr>         <chr>      <chr>      <chr>      <chr>        <MULTIPOLYGON [m]> #> 1 gerichte_amt… 121101     22010101   Landgeric… Amts… (((4578044 3151626, 4577… #> 2 gerichte_amt… 121102     22010102   Landgeric… Amts… (((4617632 3166521, 4617… #> 3 gerichte_amt… 121104     22010104   Landgeric… Amts… (((4618734 3226758, 4618… #> 4 gerichte_amt… 121105     22010105   Landgeric… Amts… (((4606644 3177952, 4606… #> 5 gerichte_amt… 121302     22010106   Landgeric… Amts… (((4553875 3257338, 4554…"},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":null,"dir":"Reference","previous_headings":"","what":"Corine Land Cover — bkg_clc","title":"Corine Land Cover — bkg_clc","text":"Retrieve land cover polygons Germany based Corine Land Cover (CLC) nomenclature. Corine Land Cover way project European Commission consistenly classify land cover land use. function interfaces wfs_clc5_* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corine Land Cover — bkg_clc","text":"","code":"bkg_clc(   ...,   year = \"2018\",   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corine Land Cover — bkg_clc","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corine Land Cover — bkg_clc","text":"sf dataframe polygon geometries following columns: clc*: CLC land cover classes given year. overview CLC classes can found Copernicus documentation. shape_length: Circumference polygon meters shape_area: Area polygon square meters","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Corine Land Cover — bkg_clc","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_clc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corine Land Cover — bkg_clc","text":"","code":"# Get glaciers in Germany bkg_clc(clc18 == \"335\") #> Simple feature collection with 6 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 4350370 ymin: 2695374 xmax: 4541743 ymax: 2720320 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 6 × 4 #>   clc18 shape_length shape_area                                         geometry #>   <chr>        <dbl>      <dbl>                                    <POLYGON [m]> #> 1 335          1332.     68237. ((4541410 2720320, 4541415 2720318, 4541419 272… #> 2 335          1054.     53554. ((4394508 2699440, 4394511 2699439, 4394517 269… #> 3 335          2757.    338082. ((4394620 2700741, 4394664 2700712, 4394672 270… #> 4 335          1853.    111068. ((4395642 2700982, 4395641 2700975, 4395641 270… #> 5 335          2667.    129627. ((4396030 2701965, 4396033 2701965, 4396036 270… #> 6 335          1321.     68108. ((4350555 2695461, 4350554 2695457, 4350553 269…  # Get all coastal wetlands bkg_clc(clc18 %LIKE% \"42%\") #> Simple feature collection with 404 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 4096873 ymin: 3350867 xmax: 4498721 ymax: 3550677 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 404 × 4 #>    clc18 shape_length shape_area                                        geometry #>    <chr>        <dbl>      <dbl>                                   <POLYGON [m]> #>  1 423          5495.    488298. ((4190905 3408370, 4190944 3408290, 4190946 34… #>  2 421         23980.   3749087. ((4183414 3403081, 4183416 3403080, 4183423 34… #>  3 421         14760.   1397288. ((4180799 3411338, 4180899 3411327, 4180909 34… #>  4 423          8598.    864323. ((4190000 3410353, 4190147 3410179, 4190156 34… #>  5 423          1575.    164467. ((4189121 3410873, 4189125 3410872, 4189128 34… #>  6 423         24185.   2903870. ((4182567 3411872, 4182731 3411842, 4182734 34… #>  7 423          5625.    184655. ((4133436 3362190, 4133441 3362189, 4133444 33… #>  8 421          2947.    156729. ((4138081 3360312, 4138079 3360311, 4138074 33… #>  9 421          4382.    438589. ((4137427 3361663, 4137433 3361663, 4137437 33… #> 10 423          3338.    201369. ((4129907 3359668, 4129904 3359666, 4129899 33… #> # ℹ 394 more rows  # Get only wetlands in Lower Saxony rlang::local_options(ffm_query_language = \"xml\") lowsax <- bkg_admin(level = \"lan\", scale = \"5000\", sn_l == \"03\", gf == 9) wetlands <- bkg_clc(clc18 %LIKE% \"4%\", poly = lowsax) #> Error in bkg_wfs(type_name = paste0(endpoint, \":clc5\"), endpoint = endpoint,     epsg = epsg, count = max, properties = properties, filter = filter): Query is too large to be handled by CQL queries. #> ℹ Consider setting `options(ffm_query_language = \"xml\")`. #> ℹ Alternatively, try to reduce the size of your query. plot(lowsax$geometry)  plot(wetlands$geometry, add = TRUE) #> Error: object 'wetlands' not found"},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":null,"dir":"Reference","previous_headings":"","what":"Border crossings — bkg_crossings","title":"Border crossings — bkg_crossings","text":"Retrieve border crossings Germany. road border crossing touches international border continues foreign side. includes ferry connections dirt roads.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Border crossings — bkg_crossings","text":"","code":"bkg_crossings(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Border crossings — bkg_crossings","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Border crossings — bkg_crossings","text":"dataframe following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name ort: Name nearest place strasse: Number label border-crossing street typ: Type checkpoint; always \"Straßenverkehr\"","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Border crossings — bkg_crossings","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_crossings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Border crossings — bkg_crossings","text":"","code":"# Get all border crossings in Bavaria crossings <- bkg_crossings(bundesland == \"Bayern\") plot(crossings$geometry, pch = 16)"},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Digital elevation model — bkg_dem","title":"Digital elevation model — bkg_dem","text":"Retrieve digital elevation model (DEM) territory Germany.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Digital elevation model — bkg_dem","text":"","code":"bkg_dem(bbox = NULL, interpolation = NULL, epsg = 3035)"},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Digital elevation model — bkg_dem","text":"bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter mask coverage raster. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. interpolation Interpolation method preprocess raster. Can \"nearest-neighbor\", \"linear\", \"cubic\". seem work currently - despite listed capability WCS. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Digital elevation model — bkg_dem","text":"SpatRaster containing elevation data.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Digital elevation model — bkg_dem","text":"","code":"library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE  # Elevation around Hanover han <- st_sfc(st_point(c(9.738611, 52.374444)), crs = 4326) han <- st_buffer(st_transform(han, 3035), dist = 2000) dem <- bkg_dem(bbox = han) terra::plot(dem)"},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Digital landscape model (DLM) — bkg_dlm","title":"Digital landscape model (DLM) — bkg_dlm","text":"Retrieve objects digital landscape model (DLM). DLMs description topographical objects landscape. Many services BKG derived DLM. Although function lets download feature type DLM, still need know data available features output actually mean. Since DLM gets pretty complicated, advised take look GeoInfoDok object type catalog. function interfaces dlm* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Digital landscape model (DLM) — bkg_dlm","text":"","code":"bkg_dlm(   type,   ...,   shape = c(\"point\", \"line\", \"polygon\"),   scale = c(\"250\", \"1000\"),   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Digital landscape model (DLM) — bkg_dlm","text":"type Feature type DLM. Can either identifier (e.g., 41010) description (e.g., Siedlungsflaeche). description can either prefixed AX_ . Providing identifier directly generally faster description needs matched requesting GetCapabilities endpoint service. Note feature types available shapes (see shape argument). see available feature types, can run bkg_feature_types(\"dlm250\") bkg_feature_types(\"dlm1000\"). ... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. shape Geometry type feature type. Must one \"point\", \"line\", \"polygon\". Defaults \"point\". shapes available feature types. scale Scale geometries. Can \"250\" (1:250,000) \"1000\" (1:1,000,000). Defaults \"250\". bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Digital landscape model (DLM) — bkg_dlm","text":"sf tibble geometry suggested shape. columns can vary depending selected feature type. meanings columns can also change depending feature type. Check GeoInfoDok object type catalog detailed documentation DLM metadata. general columns included feature types; include: id: Identifier object land: ISO-2 code country, usually DE modellart: Model type objart: Feature type digital landscape model (DLM) objart_txt: Title feature type objid: Unique object identifier beginn: Creation object DLM ende: Deletion object DLM objart_z: Object type composite object (ZUSO) objid_z: Object type composite object (ZUSO)","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Digital landscape model (DLM) — bkg_dlm","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Digital landscape model (DLM) — bkg_dlm","text":"","code":"# Retrieve all train tracks in Leipzig library(sf) lzg <- st_sfc(st_point(c(12.37475, 51.340333)), crs = 4326) lzg <- st_buffer(st_transform(lzg, 3035), dist = 10000, endCapStyle = \"SQUARE\")  tracks <- bkg_dlm(\"Bahnstrecke\", shape = \"line\", poly = lzg) tracks #> Simple feature collection with 167 features and 19 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 4473996 ymin: 3122064 xmax: 4502816 ymax: 3151592 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 167 × 20 #>    id    land  modellart objart objart_txt objid hdu_x beginn              ende  #>    <chr> <chr> <chr>     <chr>  <chr>      <chr> <int> <dttm>              <chr> #>  1 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  2 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #>  3 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #>  4 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #>  5 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  6 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  7 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  8 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  9 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #> 10 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #> # ℹ 157 more rows #> # ℹ 11 more variables: bkt <chr>, elk <chr>, gls <chr>, nam <chr>, nrb <chr>, #> #   spw <chr>, vkd <chr>, znm <chr>, zus <chr>, bemerkung <chr>, #> #   geometry <MULTILINESTRING [m]>  plot(lzg) plot(tracks$geometry, add = TRUE)   # Filter all tracks that are not rail cargo bkg_dlm(\"Bahnstrecke\", shape = \"line\", poly = lzg, bkt == \"1102\") #> Simple feature collection with 30 features and 19 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 4476343 ymin: 3135590 xmax: 4491708 ymax: 3147484 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 30 × 20 #>    id    land  modellart objart objart_txt objid hdu_x beginn              ende  #>    <chr> <chr> <chr>     <chr>  <chr>      <chr> <int> <dttm>              <chr> #>  1 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  2 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #>  3 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  4 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  5 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  6 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  7 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  8 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  9 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #> 10 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #> # ℹ 20 more rows #> # ℹ 11 more variables: bkt <chr>, elk <chr>, gls <chr>, nam <chr>, nrb <chr>, #> #   spw <chr>, vkd <chr>, znm <chr>, zus <chr>, bemerkung <chr>, #> #   geometry <MULTILINESTRING [m]>  # Directly providing the identifier is faster bkg_dlm(\"42014\", shape = \"line\", poly = lzg) #> Simple feature collection with 167 features and 19 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 4473996 ymin: 3122064 xmax: 4502816 ymax: 3151592 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 167 × 20 #>    id    land  modellart objart objart_txt objid hdu_x beginn              ende  #>    <chr> <chr> <chr>     <chr>  <chr>      <chr> <int> <dttm>              <chr> #>  1 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  2 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #>  3 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #>  4 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #>  5 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  6 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  7 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  8 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #>  9 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     0 2024-12-31 08:00:00 NA    #> 10 obja… DE    DLM250    42014  AX_Bahnst… DEBK…     1 2024-12-31 08:00:00 NA    #> # ℹ 157 more rows #> # ℹ 11 more variables: bkt <chr>, elk <chr>, gls <chr>, nam <chr>, nrb <chr>, #> #   spw <chr>, vkd <chr>, znm <chr>, zus <chr>, bemerkung <chr>, #> #   geometry <MULTILINESTRING [m]>"},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographical objects and endonyms — bkg_geonames","title":"Geographical objects and endonyms — bkg_geonames","text":"Get geographic names including toponyms endonyms. bkg_geonames retrieves geographical \"objects\" based digital landscape model (DLM). objects contain set metadata national name identifier (NNID). NNIDs can used join endonyms related geographical object (bkg_endonyms). functions interface wfs_gnde product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographical objects and endonyms — bkg_geonames","text":"","code":"bkg_geonames(   ...,   names = TRUE,   ags = FALSE,   dlm = FALSE,   status = FALSE,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )  bkg_endonyms(..., filter = NULL, properties = NULL, max = NULL)"},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographical objects and endonyms — bkg_geonames","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. names TRUE, includes endonyms geographical objects output using bkg_endonyms. Technically, can FALSE, endpoint returns meta data geographical names default. argument TRUE, output merged endonym table requiring additional request. Defaults TRUE. ags TRUE, resolves AGS codes geographical names using bkg_ags. Note setting TRUE requires additional web request. Defaults FALSE. dlm TRUE, adds DLM identifier corresponding national name identifiers (NNID) output using bkg_dlm. Note setting TRUE requires additional web request. Defaults FALSE. status TRUE, adds date objects last edit output. Note setting TRUE requires additional web request. Defaults FALSE. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographical objects and endonyms — bkg_geonames","text":"dataframe containing following columns: nnid: National name identifier landesCode: Country identifier; 276 Germany. beschreibung: Optional details geoLaenge: Geographical longitude geoBreite: Geographical latitude hoehe: Elevation sea level hoeheger: Computed elevation sea level groesse: Undocumented, guess relates suggested print size labels ewz: Number inhabitants ewzger: Computed number inhabitants ags: Official municipality key (Amtlicher Gemeindeschlu00fcssel). Related ARS shortened omit position 6 9. Structured follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-8: Municipality gemteil: Whether place part municipality virtuell: Whether place real virtual locality ars: Territorial code (Amtlicher Regionalschlu00fcssel). ARS stuctured hierarchically follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-9: Administrative association Position 10-12: Municipality ags = TRUE, adds output bkg_ags. dlm = TRUE, adds column dlm_id containing identifiers bkg_dlm. bkg_endonyms contains following columns: name: Name geographical object geschlecht: applicable, grammatical gender geographical name also included output bkg_geonames names = TRUE.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographical objects and endonyms — bkg_geonames","text":"functions make use GN-DE WFS, just like bkg_ags, bkg_ars, bkg_area_codes. infrastructure behind actually quite sophisticated function may live standards. can use bkg_feature_types bkg_wfs manually explore service's endpoints required.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Geographical objects and endonyms — bkg_geonames","text":"WFS interfaces like bkg_admin allow querying using CQL XML, bkg_geonames bkg_endonyms (using GNDE service) support XML. implications allowed query filters (see wfs_filter).","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_geonames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographical objects and endonyms — bkg_geonames","text":"","code":"# Plot geographical objects in Cologne library(sf) library(ggplot2) cgn <- st_sfc(st_point(c(6.956944, 50.938056)), crs = 4326) cgn <- st_buffer(st_transform(cgn, 3035), dist = 500)  cgn_names <- bkg_geonames(poly = cgn) st_geometry(cgn_names) <- st_centroid(st_geometry(cgn_names)) cgn_names <- cgn_names[lengths(st_intersects(cgn_names, cgn)) > 0, ] ggplot(cgn_names) + geom_sf_text(aes(label = name)) + theme_void()"},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"INSPIRE grids — bkg_grid","title":"INSPIRE grids — bkg_grid","text":"Retrieve geometries INSPIRE-compliant grid geometries (also called \"GeoGitter\"). bkg_grid_fast() much faster bkg_grid_full() downloading heavily compressed versions grids. happens cost data richness bkg_grid_fast() contains geometries nothing else. Note arrow package needs installed use bkg_grid_fast(). Note output contains point geometries. times, want work rasters instead. convert given object , type following (terra package required): functions interface GeoGitter product BKG.","code":"terra::rast(out)"},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"INSPIRE grids — bkg_grid","text":"","code":"bkg_grid_fast(   year = c(\"2019\", \"2018\", \"2017\", \"2015\"),   resolution = c(\"100km\", \"10km\", \"5km\", \"1km\", \"250m\", \"100m\"),   timeout = 600,   update_cache = FALSE )  bkg_grid_full(   year = \"latest\",   resolution = c(\"100km\", \"10km\", \"5km\", \"1km\", \"250m\", \"100m\"),   timeout = 600,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"INSPIRE grids — bkg_grid","text":"year Version grid. Can \"2015\", \"2017\", \"2018\" \"2019\". bkg_grid_fast, \"latest\" downloads latest version grid. resolution Cell size grid. Can \"100m\", \"250m\", \"1km\", \"5km\", \"10km\", \"100km\". timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"INSPIRE grids — bkg_grid","text":"bkg_grid_fast returns sf dataframe point geometries features. bkg_grid_full also returns point geometries following additional features: x_sw: X coordinate South-West corner grid cell y_sw: Y coordinate South-West corner grid cell f_staat: State area grid cell square meters f_land: Land area grid cell square meters f_wasser: Water area grid cell square meters p_staat: Share state area grid cell p_land: Share land area grid cell p_wasser: Share water area grid cell ags: Official municipality key (Amtlicher Gemeindeschlu00fcssel). Related ARS shortened omit position 6 9. Structured follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-8: Municipality Note ags included resolutions \"100m\" \"250m\"","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"INSPIRE grids — bkg_grid","text":"following table gives rough idea much less data bkg_grid_fast needs download resolution compared bkg_grid_full.","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"INSPIRE grids — bkg_grid","text":"","code":"# Return a bare-bones version of the INSPIRE grid grid <- bkg_grid_fast(year = \"2019\", resolution = \"100km\")  # Return a fully detailed version instead grid_full <- bkg_grid_full(resolution = \"5km\")  plot(grid)   # Convert grid to SpatRaster if (requireNamespace(\"terra\")) {   library(terra)   raster <- rast(vect(grid_full[\"p_wasser\"]), type = \"xyz\")   plot(raster, main = \"Share of water area\") } #> terra 1.8.70"},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":null,"dir":"Reference","previous_headings":"","what":"Heliports — bkg_heliports","title":"Heliports — bkg_heliports","text":"Get heliports Germany. Based data third-party providers image classification aerial imagery.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heliports — bkg_heliports","text":"","code":"bkg_heliports(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heliports — bkg_heliports","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heliports — bkg_heliports","text":"dataframe following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name code: Identifier heliport name_bkg: Name landing site according BKG name_dfs: Name landing size according Deutsche Flugsicherung (DFS) airport_pk: Identifier according LFS aviation manual befestigun: Pavement type landing site. Can : befestigt: paved teilweise befestigt: partially paved unbefestigt: unpaved kennzeich: Marking landing size. Can : gekennzeichnet: marked nicht gekennzeichnet: marked lage: Location landing size. Can : D: Roof F: Field PG: Platform next hospital W: Pasture LP: Landing site PP: Parking lot LP / W: Paved landing size pasture F / W: Field pasture LP / Str.: Landing size next street typ: Type heliport. Can : H: Heliport HH: Heliport hospital MH: Military heliport typ2: Additional heliport type landing sites air rescue station. Can : HRLS: Helicopter air rescue station ITH: Intensive transport helicopter betreiber: Operator heliport helikopter: Name helicopter belonging air rescue station status: Whether point geometry edited BKG. Can : Original: edited Verschoben: moved neu: newly added quelle: Source information. Can : BKG: research BKG DFS-Liste: Provided DFS LBA-Liste: Provided Federal Aviation Office (LBA) MHW: Provided Medical Disaster Relief Organization (MHW) RTH.Info: Provided rth.info","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Heliports — bkg_heliports","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_heliports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heliports — bkg_heliports","text":"","code":"# Get only military heliports bkg_heliports(typ == \"MH\") #> Simple feature collection with 4 features and 19 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4143804 ymin: 2919793 xmax: 4544198 ymax: 3277696 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 4 × 20 #>   code  name_bkg      name_dfs airport_pk befestigun kennzeich lage  typ   typ2  #>   <chr> <chr>         <chr>    <chr>      <chr>      <chr>     <chr> <chr> <chr> #> 1 LR018 Bundeswehr (… Nieders… NA         befestigt  gekennze… LP    MH    HLRS  #> 2 LR030 Hubschrauber… Berlin-… NA         befestigt  gekennze… LP    MH    NA    #> 3 ETED  Kaiserslaute… Kaisers… 7789       befestigt  nicht ge… LP    MH    NA    #> 4 ETIY  Landstuhl Ho… LANDSTU… 7790       befestigt  gekennze… LP    MH    NA    #> # ℹ 11 more variables: betreiber <chr>, helikopter <chr>, status <chr>, #> #   quelle <chr>, ars <chr>, gemeinde <chr>, verwaltung <chr>, kreis <chr>, #> #   regierungs <chr>, bundesland <chr>, geometry <POINT [m]>  # Get only rooftop heliports bkg_heliports(lage == \"D\") #> Simple feature collection with 197 features and 19 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4049323 ymin: 2708512 xmax: 4668344 ymax: 3520701 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 197 × 20 #>    code   name_bkg    name_dfs airport_pk befestigun kennzeich lage  typ   typ2  #>    <chr>  <chr>       <chr>    <chr>      <chr>      <chr>     <chr> <chr> <chr> #>  1 LR001  BG Kliniku… Berlin … NA         befestigt  gekennze… D     HH    HLRS  #>  2 ED1574 Universitä… Würzburg 7266       befestigt  gekennze… D     HH    NA    #>  3 ED1577 Helios Kli… Krefeld… 7269       befestigt  gekennze… D     HH    NA    #>  4 ED1582 Herz- und … BAD OEY… 7274       befestigt  gekennze… D     HH    NA    #>  5 ED1588 Klinikum B… Bremerh… 7281       befestigt  gekennze… D     HH    NA    #>  6 ED1590 Universitä… Düsseld… 7284       befestigt  gekennze… D     HH    NA    #>  7 ED1596 BG Unfallk… Frankfu… 7290       befestigt  gekennze… D     HH    NA    #>  8 ED1597 Klinikum F… Fulda K… 7291       befestigt  gekennze… D     HH    HLRS  #>  9 ED1598 Klinikum G… GARMISC… 7292       befestigt  gekennze… D     HH    NA    #> 10 ED1604 Medizinisc… HANNOVE… 7298       befestigt  gekennze… D     HH    HLRS  #> # ℹ 187 more rows #> # ℹ 11 more variables: betreiber <chr>, helikopter <chr>, status <chr>, #> #   quelle <chr>, ars <chr>, gemeinde <chr>, verwaltung <chr>, kreis <chr>, #> #   regierungs <chr>, bundesland <chr>, geometry <POINT [m]>"},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":null,"dir":"Reference","previous_headings":"","what":"Vehicle registration plates — bkg_kfz","title":"Vehicle registration plates — bkg_kfz","text":"Retrieve motor vehicle registration plate regions Germany. Registration plate regions discerned area code (Unterscheidungszeichen) indicate place vehicle registered. regions partially overlap districts entirely identical. function interfaces wfs_kfz250 product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vehicle registration plates — bkg_kfz","text":"","code":"bkg_kfz(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vehicle registration plates — bkg_kfz","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vehicle registration plates — bkg_kfz","text":"sf dataframe multipolygon geometries following columns: debkgid: Identifier digital landscape model DLM250 nnid: National name identifier name: Name geographical object ars: Territorial code (Amtlicher Regionalschlu00fcssel). ARS stuctured hierarchically follows: Position 1-2: Federal state Position 3: Government region Position 4-5: District Position 6-9: Administrative association Position 10-12: Municipality oba: Name ATKIS object type kfz: Vehicle registration area code, comma-separated case multiple codes geola: Geographical longitude geobr: Geographical latitude gkre: Gauu00df-Kru00fcger easting gkho: Gauu00df-Kru00fcger northing utmre: UTM easting utmho: UTM northing","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_kfz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vehicle registration plates — bkg_kfz","text":"","code":"library(ggplot2)  kfz <- bkg_kfz(ars %LIKE% \"053%\") ggplot(kfz) +   geom_sf(fill = NA) +   geom_sf_text(aes(label = kfz)) +   theme_void()"},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":null,"dir":"Reference","previous_headings":"","what":"Kilometrage — bkg_kilometrage","title":"Kilometrage — bkg_kilometrage","text":"Get kilometrages German federal motorways. Kilometrages markers kilometer highway. can used create linear referencing systems (LRS).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kilometrage — bkg_kilometrage","text":"","code":"bkg_kilometrage(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kilometrage — bkg_kilometrage","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kilometrage — bkg_kilometrage","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name bez: Label federal motorway kilometer: Kilometrage motorway richtung: Direction kilometrage","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Kilometrage — bkg_kilometrage","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_kilometrage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kilometrage — bkg_kilometrage","text":"","code":"# Get the kilometrage of the A2 motorway a2 <- bkg_kilometrage(bez == \"A2\") plot(a2[\"kilometer\"], pch = 16)"},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":null,"dir":"Reference","previous_headings":"","what":"NUTS regions — bkg_nuts","title":"NUTS regions — bkg_nuts","text":"Retrieve polygons NUTS regions. function interfaces nuts* products BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NUTS regions — bkg_nuts","text":"","code":"bkg_nuts(   level = c(\"1\", \"2\", \"3\"),   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   key_date = c(\"0101\", \"1231\"),   year = \"latest\",   allow_local = TRUE,   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NUTS regions — bkg_nuts","text":"level NUTS level download. Can \"1\" (federal states), \"2\" (inconsistent, something states government regions), \"3\" (districts). Defaults federal states. scale Scale geometries. Can \"250\" (1:250,000), \"1000\" (1:1,000,000), \"2500\" (1:2,500,000) \"5000\" (1:5,000,000). \"250\", population data included output. Defaults \"250\". key_date resolution %% c(\"250\", \"5000\"), specifies key date download administrative data. Can either \"0101\" (January 1) \"1231\" (December 31). latter able georeference statistical data first integrates changes made new year. \"1231\", population data attached, otherwise . Note population data available scales (usually 250 1000). Defaults \"0101\". year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. allow_local TRUE, allows special datasets loaded locally. FALSE, always downloads internet. bkg_nuts, datasets nuts_data can loaded. applies scale = \"5000\", key_date = \"1231\", year = \"2023\". timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NUTS regions — bkg_nuts","text":"sf dataframe multipolygon geometries following columns: GF: Integer representing geofactor; whether area \"structured\" . Land structured part state administrative unit divided administrative units. Can one 1: Unstructured, waterbody 2: Structured, waterbody 3: Unstructured, land 4: Structured, land NUTS_LEVEL: NUTS level. Can one 1: NUTS-1; federal states 2: NUTS-2; inconsistent, somewhere government regions federal states 3: NUTS-3; districts NUTS_CODE: Hierarchical key NUTS region. Can different number characters depending NUTS level: NUTS-1: three digits NUTS-2: four digits NUTS-3: five digits NUTS_NAME: Geographical name NUTS region","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NUTS regions — bkg_nuts","text":"function query WFS able download entire datasets without ability filter beforehand.","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_nuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NUTS regions — bkg_nuts","text":"","code":"# Download NUTS state data from 2020 bkg_nuts(scale = \"5000\", year = 2020) #> Simple feature collection with 16 features and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 280353.1 ymin: 5235878 xmax: 921261.6 ymax: 6101302 #> Projected CRS: ETRS89 / UTM zone 32N #> # A tibble: 16 × 4 #>    NUTS_LEVEL NUTS_CODE NUTS_NAME                                       geometry #>         <int> <chr>     <chr>                                 <MULTIPOLYGON [m]> #>  1          1 DE1       Baden-Württemberg      (((579018.4 5345197, 578730 5342… #>  2          1 DE2       Bayern                 (((792217.3 5346780, 787582.4 53… #>  3          1 DE3       Berlin                 (((791413.7 5842844, 790893.8 58… #>  4          1 DE4       Brandenburg            (((819216.5 5702544, 817838.5 57… #>  5          1 DE5       Bremen                 (((471012 5933445, 468446.4 5938… #>  6          1 DE6       Hamburg                (((464521.5 5978903, 462755.7 59… #>  7          1 DE7       Hessen                 (((492636.7 5483361, 491362.4 54… #>  8          1 DE8       Mecklenburg-Vorpommern (((813435.5 6003613, 813323.1 60… #>  9          1 DE9       Niedersachsen          (((529970.5 5722449, 526897.9 57… #> 10          1 DEA       Nordrhein-Westfalen    (((469921.3 5816808, 476396.4 58… #> 11          1 DEB       Rheinland-Pfalz        (((398199.1 5437440, 394903.6 54… #> 12          1 DEC       Saarland               (((356384.3 5448971, 356828.6 54… #> 13          1 DED       Sachsen                (((869314.7 5719837, 870358.6 57… #> 14          1 DEE       Sachsen-Anhalt         (((682263.4 5665628, 679699.4 56… #> 15          1 DEF       Schleswig-Holstein     (((579561.1 5937947, 578707.1 59… #> 16          1 DEG       Thüringen              (((727655.1 5626574, 728299.4 56…  # Download the latest NUTS district data bkg_nuts(level = \"3\") #> Simple feature collection with 428 features and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 280371.1 ymin: 5235856 xmax: 921292.4 ymax: 6101444 #> Projected CRS: ETRS89 / UTM zone 32N #> # A tibble: 428 × 5 #>       GF NUTS_LEVEL NUTS_CODE NUTS_NAME                                 geometry #>    <int>      <int> <chr>     <chr>                           <MULTIPOLYGON [m]> #>  1     4          3 DE111     Stuttgart, Stadtkreis (((516514.1 5412585, 516501… #>  2     4          3 DE112     Böblingen             (((507605.3 5393882, 507674… #>  3     4          3 DE113     Esslingen             (((530167.9 5376192, 529989… #>  4     4          3 DE114     Göppingen             (((546693.5 5376179, 546296… #>  5     4          3 DE115     Ludwigsburg           (((525746.8 5426306, 525785… #>  6     4          3 DE116     Rems-Murr-Kreis       (((536207.7 5401707, 536137… #>  7     4          3 DE117     Heilbronn, Stadtkreis (((508553.4 5450760, 508678… #>  8     4          3 DE118     Heilbronn, Landkreis  (((525039.4 5446468, 525384… #>  9     4          3 DE119     Hohenlohekreis        (((560682.9 5459435, 560710… #> 10     4          3 DE11A     Schwäbisch Hall       (((585283 5434640, 585236.5… #> # ℹ 418 more rows"},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Quasigeoid — bkg_quasigeoid","title":"Quasigeoid — bkg_quasigeoid","text":"Retrieves \"German Combined Quasigeoid\", official height reference surface German land survey reference ellipsoid (GRS80). quasigeoid approximation geoid surface used define normal heights earth's surface based practical assumptions true geoid. defines heights meters can meaningful ellipsoidal heights many applications like surveying, hydrological modeling, engineering, spatial analysis. function interfaces quasigeoid product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quasigeoid — bkg_quasigeoid","text":"","code":"bkg_quasigeoid(   year = \"latest\",   region = c(\"all\", \"coast\", \"no\", \"nw\", \"s\", \"w\"),   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quasigeoid — bkg_quasigeoid","text":"year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. region Subterritory Germany. \"\" returns data Germany, \"coast\" returns coastal regions \"\", \"nw\", \"s\" \"w\" refer cardinal directions. Defaults \"\". timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quasigeoid — bkg_quasigeoid","text":"SpatRaster containing normal heights specified region. data comes EPSG:4258 resolution 30\" x 45\" (approximately 0.9 x 0.9 km).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_quasigeoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quasigeoid — bkg_quasigeoid","text":"","code":"library(terra) qgeoid <- bkg_quasigeoid(region = \"no\") terra::plot(qgeoid)"},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-administrative regions — bkg_ror","title":"Non-administrative regions — bkg_ror","text":"Retrieve areal data related BKG calls non-administrative regions. includes: bkg_ror: Raumordnungsregionen (Spatial planning regions) bkg_rg: Reisegebiete (Travel areas) bkg_amr: Arbeitsmarktregionen (Labor market regions) bkg_bkr: Braunkohlereviere (Lignite regions) bkg_krg: Kreisregionen (District regions) bkg_mbe: BBSR Mittelbereiche (BBSR middle areas) bkg_ggr: Großstadtregionen (City regions) bkg_kmr: Metropolregionen (Metropolitan regions) bkg_mkro: Verdichtungsräume (Conurbations) functions interface ge* product BKG.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-administrative regions — bkg_ror","text":"","code":"bkg_ror(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_rg(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_amr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_bkr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_krg(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_mbe(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_ggr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_kmr(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )  bkg_mkro(   scale = c(\"250\", \"1000\", \"2500\", \"5000\"),   year = \"latest\",   timeout = 120,   update_cache = FALSE )"},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-administrative regions — bkg_ror","text":"scale Scale geometries. Can \"250\" (1:250,000), \"1000\" (1:1,000,000), \"2500\" (1:2,500,000) \"5000\" (1:5,000,000). \"250\", population data included output. Defaults \"250\". year Version year dataset. can use latest retrieve latest dataset version available BKG's geodata center. Older versions can browsed using archive. timeout Timeout value data download passed req_timeout. Adjust internet connection slow downloading larger datasets. update_cache default, downloaded files cached tempdir() directory R. downloading data , data downloaded instead taken cache. Sometimes can desired behavior. want overwrite cache, pass TRUE. Defaults FALSE, .e. always adopt cache possible.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_ror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-administrative regions — bkg_ror","text":"sf tibble multipolygon geometries two features, regional identifier region endonyms.","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":null,"dir":"Reference","previous_headings":"","what":"Seaports — bkg_seaports","title":"Seaports — bkg_seaports","text":"Retrieve seaports North Baltic Sea Northern Germany.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seaports — bkg_seaports","text":"","code":"bkg_seaports(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seaports — bkg_seaports","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seaports — bkg_seaports","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name poi_id: Unique primary key point interest betreiber: Operator seaport homepage: Homepage operator typ: Type seaport. Can \"Seehafen\" (seaport) \"See- und Binnenhafen\" (sea inland port) art: Type seaport freight. Can : Güter: Goods Güter und Passagiere: Goods passengers Passagiere: Passengers quelle: Source information. Can : BSH: Federal Maritime Hydrographic Agency MarWiLo: Maritime Wirtschaft & Logistik ZDS-Seehäfen: Zentralverband der deutschen Seehafenbetriebe","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Seaports — bkg_seaports","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_seaports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seaports — bkg_seaports","text":"","code":"# Get only seaports that co-function as inland ports ports <- bkg_seaports(typ == \"See- und Binnenhafen\") #> Error in httr2::req_perform(req): HTTP 400 Bad Request. #> InvalidParameterValue: Feature type :seehaefen unknown germany <- bkg_admin(level = \"sta\", scale = \"5000\", gf == 9) plot(germany$geometry)  plot(ports$geometry, add = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'ports' not found"},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Stations and stops — bkg_stations","title":"Stations and stops — bkg_stations","text":"Retrieve data public transport stations stops Germany. Stations stops hierarchical. means stations represent structural facilities hierarchically superior objects stops hierarchically inferiors parts station (e.g., single platform bus stop).","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stations and stops — bkg_stations","text":"","code":"bkg_stations(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stations and stops — bkg_stations","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stations and stops — bkg_stations","text":"dataframe following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name stop_id: Identifier station stop parent_st: Identifier parent station applicable verkehrsm: Vehicle used station, comma-separated sorted alphabetically art: Hierarchical position station. Can : Station: physical structure hierarchically superior Haltestelle: Part structure hierarchically inferior tag_f_awo: Mean departures per day work week tag_f_wo: Mean departures per day full week","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Stations and stops — bkg_stations","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stations and stops — bkg_stations","text":"","code":"# Get all long-distance train stations bkg_stations(verkehrsm %LIKE% \"%Fernzug%\", art == \"Station\") #> Simple feature collection with 137 features and 13 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4118289 ymin: 2699754 xmax: 4630711 ymax: 3532670 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 137 × 14 #>    stop_id     name  parent_st verkehrsm art   tag_f_awo tag_f_wo ars   gemeinde #>    <chr>       <chr> <chr>     <chr>     <chr>     <int>    <int> <chr> <chr>    #>  1 de:08136:1… Aale… NA        Fernzug,… Stat…       154      151 0813… Aalen    #>  2 de:08211:1… Bade… NA        Bus, Fer… Stat…       613      551 0821… Baden-B… #>  3 de:08115:7… Böbl… NA        Bus, Fer… Stat…       985      879 0811… Böbling… #>  4 de:08115:4… Bond… NA        Bus, Fer… Stat…       195      172 0811… Bondorf  #>  5 de:08127:2… Crai… NA        Fernzug,… Stat…        81       78 0812… Crailsh… #>  6 de:08136:2… Ellw… NA        Fernzug,… Stat…        51       52 0813… Ellwang… #>  7 de:08335:6… Enge… NA        Bus, Fer… Stat…       232      204 0833… Engen    #>  8 de:08237:7… Euti… NA        Bus, Fer… Stat…       123      104 0823… Eutinge… #>  9 de:08115:5… Gäuf… NA        Bus, Fer… Stat…       147      128 0811… Gäufeld… #> 10 de:08117:1… Göpp… NA        Bus, Fer… Stat…       791      684 0811… Göpping… #> # ℹ 127 more rows #> # ℹ 5 more variables: verwaltung <chr>, kreis <chr>, regierungs <chr>, #> #   bundesland <chr>, geometry <POINT [m]>  # Get all platforms of long-distance train stations bkg_stations(verkehrsm %LIKE% \"%Fernzug%\", art == \"Haltestelle\") #> Simple feature collection with 543 features and 13 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4045363 ymin: 2699754 xmax: 4630650 ymax: 3534754 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 543 × 14 #>    stop_id     name  parent_st verkehrsm art   tag_f_awo tag_f_wo ars   gemeinde #>    <chr>       <chr> <chr>     <chr>     <chr>     <int>    <int> <chr> <chr>    #>  1 de:08136:1… Aale… de:08136… Fernzug,… Halt…        43       42 0813… Aalen    #>  2 de:08136:1… Aale… de:08136… Fernzug,… Halt…        33       35 0813… Aalen    #>  3 ::stop0162… Aale… de:08136… Bus, Fer… Halt…        NA       NA 0813… Aalen    #>  4 de:08211:1… Bade… de:08211… Fernzug,… Halt…        25       23 0821… Baden-B… #>  5 de:08211:1… Bade… de:08211… Fernzug,… Halt…        27       25 0821… Baden-B… #>  6 de:08211:1… Bahn… de:08211… Fernzug,… Halt…        50       47 0821… Baden-B… #>  7 de:08115:7… Böbl… de:08115… Fernzug,… Halt…        61       56 0811… Böbling… #>  8 de:08115:7… Böbl… de:08115… Fernzug,… Halt…       103       98 0811… Böbling… #>  9 de:08115:4… Bond… de:08115… Fernzug,… Halt…        45       41 0811… Bondorf  #> 10 de:08115:4… Bond… de:08115… Fernzug,… Halt…        53       48 0811… Bondorf  #> # ℹ 533 more rows #> # ℹ 5 more variables: verwaltung <chr>, kreis <chr>, regierungs <chr>, #> #   bundesland <chr>, geometry <POINT [m]>  # Get all stops with high traffic bkg_stations(tag_f_awo > 1000, art == \"Station\") #> Simple feature collection with 463 features and 13 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4042093 ymin: 2751521 xmax: 4584718 ymax: 3520149 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 463 × 14 #>    stop_id     name  parent_st verkehrsm art   tag_f_awo tag_f_wo ars   gemeinde #>    <chr>       <chr> <chr>     <chr>     <chr>     <int>    <int> <chr> <chr>    #>  1 de:08426:6… Bibe… NA        Bus, Zug… Stat…      1017      849 0842… Biberac… #>  2 de:08116:2… Essl… NA        Bus       Stat…      1025      909 0811… Essling… #>  3 de:08311:6… Frei… NA        Bus, Hoc… Stat…      1538     1379 0831… Freibur… #>  4 de:08221:1… Heid… NA        Bus       Stat…      1239     1126 0822… Heidelb… #>  5 de:08221:1… Heid… NA        Bus, Str… Stat…      1614     1484 0822… Heidelb… #>  6 de:08221:1… Heid… NA        Bus, Hoc… Stat…      1999     1807 0822… Heidelb… #>  7 de:08221:1… Heid… NA        Bus       Stat…      1274     1148 0822… Heidelb… #>  8 de:08221:1… Heid… NA        Bus       Stat…      1234     1119 0822… Heidelb… #>  9 de:08221:1… Heid… NA        Bus, Str… Stat…      1262     1145 0822… Heidelb… #> 10 de:08121:1… Heil… NA        Bus, S-B… Stat…      1030      908 0812… Heilbro… #> # ℹ 453 more rows #> # ℹ 5 more variables: verwaltung <chr>, kreis <chr>, regierungs <chr>, #> #   bundesland <chr>, geometry <POINT [m]>  # Get all bus stops with low traffic bkg_stations(tag_f_awo < 1, verkehrsm %LIKE% \"%Bus%\", art == \"Station\") #> Simple feature collection with 428 features and 13 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4051619 ymin: 2713127 xmax: 4640909 ymax: 3504994 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 428 × 14 #>    stop_id     name  parent_st verkehrsm art   tag_f_awo tag_f_wo ars   gemeinde #>    <chr>       <chr> <chr>     <chr>     <chr>     <int>    <int> <chr> <chr>    #>  1 de:08136:1… Ebna… NA        Bus       Stat…         0        2 0813… Aalen    #>  2 de:08417:3… Onst… NA        Bus       Stat…         0        1 0841… Albstadt #>  3 de:08417:3… Onst… NA        Bus       Stat…         0        2 0841… Albstadt #>  4 de:08119:6… Klei… NA        Bus       Stat…         0        2 0811… Aspach   #>  5 de:08119:5… Lipp… NA        Bus       Stat…         0        2 0811… Auenwald #>  6 de:08425:2… Blau… NA        Bus       Stat…         0        1 0842… Blaubeu… #>  7 de:08425:2… Blau… NA        Bus       Stat…         0        1 0842… Blaubeu… #>  8 de:08115:4… Böbl… NA        Bus       Stat…         0        1 0811… Böbling… #>  9 de:08337:6… Bonn… NA        Bus       Stat…         0        1 0833… Bonndor… #> 10 de:08337:5… Günd… NA        Bus       Stat…         0        1 0833… Bonndor… #> # ℹ 418 more rows #> # ℹ 5 more variables: verwaltung <chr>, kreis <chr>, regierungs <chr>, #> #   bundesland <chr>, geometry <POINT [m]>"},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":null,"dir":"Reference","previous_headings":"","what":"Trauma centers — bkg_trauma_centers","title":"Trauma centers — bkg_trauma_centers","text":"Retrieve data trauma centers Germany. trauma center hospital certified German Society Trauma Surgery (DGU) able provide maximum care heavily injured people. Trauma centers organized hierarchical regional network ranges local transregional centers.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trauma centers — bkg_trauma_centers","text":"","code":"bkg_trauma_centers(   ...,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   filter = NULL,   epsg = 3035,   properties = NULL,   max = NULL )"},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trauma centers — bkg_trauma_centers","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. epsg EPSG code specifying coordinate reference system output. unsure means, try running sf::st_crs(...)$epsg spatial object working . Defaults 3035. properties Vector columns include output. max Maximum number results return.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trauma centers — bkg_trauma_centers","text":"dataframe containing following columns: name: Geographical name POI gemeinde: Municipality name verwaltung: Administrative association name kreis: District name regierungs: Government region name bundesland: Federal state name poi_id: Unique primary key point interest tz_nummer: Unique primary key trauma center strasse: Street hn: House number plz: Zip code ort: Place name netwerk: Name regional trauma center network abteilung: Name medical department typ: Type trauma center. Can : LTZ: local trauma center RTZ: regional trauma center ÜTZ: transregional trauma center","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"query-language","dir":"Reference","previous_headings":"","what":"Query language","title":"Trauma centers — bkg_trauma_centers","text":"default, WFS requests use CQL (Contextual Query Language) queries simplicity. CQL queries work together GET requests. means URL longer 2048 characters, fail. POST requests much flexible able accommodate long queries, XML really pain work confident approach construct XML queries. can control whether send GET POST requests setting options(ffm_query_language = \"XML\") options(ffm_query_language = \"CQL\").","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_trauma_centers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trauma centers — bkg_trauma_centers","text":"","code":"# Get only trauma centers specializing on orthopedics bkg_trauma_centers(abteilung %LIKE% \"%orthopäd%\") #> Simple feature collection with 21 features and 16 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4062805 ymin: 2708345 xmax: 4488060 ymax: 3396631 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 21 × 17 #>    poi_id     tz_nummer name  strasse hn    plz   ort   netzwerk abteilung typ   #>    <chr>      <chr>     <chr> <chr>   <chr> <chr> <chr> <chr>    <chr>     <chr> #>  1 DEBKGPOI0… TZ-00268  Städ… Moltke… 90    76133 Karl… TraumaN… Klinik f… ÜTZ   #>  2 DEBKGPOI0… TZ-00181  Klin… Auenst… 6     82467 Garm… TraumaN… Abteilun… RTZ   #>  3 DEBKGPOI0… TZ-00701  Kran… Simons… 55    91207 Lauf… TraumaN… Unfallch… LTZ   #>  4 DEBKGPOI0… TZ-00368  HELI… Steine… 5     81241 Münc… TraumaN… Klinik f… RTZ   #>  5 DEBKGPOI0… TZ-00417  Sana… Langer… 12    91257 Pegn… TraumaN… Unfallch… LTZ   #>  6 DEBKGPOI0… TZ-00456  Klin… Ansbac… 131   91541 Roth… TraumaN… Unfall- … LTZ   #>  7 DEBKGPOI0… TZ-00675  Askl… Tangst… 400   22417 Hamb… TraumaN… Unfall- … ÜTZ   #>  8 DEBKGPOI0… TZ-00253  Krei… Lieben… 1     34369 Hofg… TraumaN… Chirurgi… LTZ   #>  9 DEBKGPOI0… TZ-00271  Elis… Weinbe… 7     34117 Kass… TraumaN… Abteilun… LTZ   #> 10 DEBKGPOI0… TZ-00314  St.V… Auf de… NA    65549 Limb… TraumaN… Unfall- … RTZ   #> # ℹ 11 more rows #> # ℹ 7 more variables: ars <chr>, gemeinde <chr>, verwaltung <chr>, kreis <chr>, #> #   regierungs <chr>, bundesland <chr>, geometry <POINT [m]>  # Get only local trauma centers bkg_trauma_centers(typ == \"LTZ\") #> Simple feature collection with 284 features and 16 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4044367 ymin: 2724853 xmax: 4659794 ymax: 3486644 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 284 × 17 #>    poi_id     tz_nummer name  strasse hn    plz   ort   netzwerk abteilung typ   #>    <chr>      <chr>     <chr> <chr>   <chr> <chr> <chr> <chr>    <chr>     <chr> #>  1 DEBKGPOI0… TZ-00039  Zoll… Tübing… 30    72336 Bali… TraumaN… Klinik f… LTZ   #>  2 DEBKGPOI0… TZ-00619  Krei… Eduard… 6     75365 Calw  TraumaN… Klinik f… LTZ   #>  3 DEBKGPOI0… TZ-00621  Land… Garten… 21    74564 Crai… TraumaN… Orthopäd… LTZ   #>  4 DEBKGPOI0… TZ-00708  Kran… Rutesh… 50    71229 Leon… TraumaN… Klinik f… LTZ   #>  5 DEBKGPOI0… TZ-00717  Ther… Basser… 1     68165 Mann… TraumaN… Unfallch… LTZ   #>  6 DEBKGPOI0… TZ-00357  Neck… Knopfw… 1     74821 Mosb… TraumaN… Klinik f… LTZ   #>  7 DEBKGPOI0… TZ-00358  RKH … Herman… 34    75417 Mühl… TraumaN… Sektion … LTZ   #>  8 DEBKGPOI0… TZ-00382  Klin… Röntge… 20    72202 Nago… TraumaN… Klinik f… LTZ   #>  9 DEBKGPOI0… TZ-00733  medi… Hedelf… 166   73760 Ostf… TraumaN… Klinik f… LTZ   #> 10 DEBKGPOI0… TZ-00747  HELI… Kranke… 30    78628 Rott… TraumaN… Unfallch… LTZ   #> # ℹ 274 more rows #> # ℹ 7 more variables: ars <chr>, gemeinde <chr>, verwaltung <chr>, kreis <chr>, #> #   regierungs <chr>, bundesland <chr>, geometry <POINT [m]>  if (requireNamespace(\"ggplot2\")) {   library(ggplot2)   centers <- bkg_trauma_centers()   ggplot() +   geom_sf(     data = centers[centers$typ %in% \"LTZ\",],     size = 1,     color = \"lightblue1\"   ) +   geom_sf(     data = centers[centers$typ %in% \"RTZ\",],     size = 2,     color = \"lightblue3\"   ) +   geom_sf(     data = centers[centers$typ %in% \"ÜTZ\",],     size = 3,     color = \"lightblue4\"   ) +   theme_void() }"},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":null,"dir":"Reference","previous_headings":"","what":"BKG WCS — bkg_wcs","title":"BKG WCS — bkg_wcs","text":"Low-level interface BKG-style web coverage services (WCS). function used high-level functions ffm depend WCS, e.g., bkg_dem.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BKG WCS — bkg_wcs","text":"","code":"bkg_wcs(   coverage_id,   endpoint = coverage_id,   version = \"2.0.1\",   method = NULL,   format = \"image/tiff;application=geotiff\",   epsg = 3035,   interpolation = NULL,   ... )"},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BKG WCS — bkg_wcs","text":"coverage_id Coverage ID. doubt, inspect GetCapabilities service. endpoint Endpoint interface. Note wcs_ appended rest product name must provided. example, wcs_dgm200_inspire becomes dgm200_inspire. Defaults value coverage_id. version Service version WCS. Defaults 2.0.1. method HTTP method use request. GET requests provide parameters using URL queries. Filters must provided CQL queries. less error-prone, allows maximum number 2048 characters. Especially providing sophisticated spatial queries, GET queries simply accepted services. cases makes sense use POST requests instead. NULL, method inferred type filter query provided filter (either XML CQL). filter provided, method inferred getOption(\"ffm_query_language\"). format Content type output. value heavily depends endpoint queried. Defaults \"image/tiff;application=geotiff\". epsg Numeric value giving EPSG identifier coordinate reference system (CRS). EPSG code automatically formatted OGC-compliant manner. Note EPSG codes supported. Inspect GetCapabilities target service find EPSG codes available. Defaults EPSG:3035. interpolation Method used interpolate coverage raster. Allowed methods depend capabilities WCS. ... parameters passed WFS query. case POST requests, additional namespaces may necessary query WFS. Argument names interpreted prefix (e.g. xmlns:wfs) argument values namespace links.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BKG WCS — bkg_wcs","text":"SpatRaster.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BKG WCS — bkg_wcs","text":"","code":"# Boundaries can be provided using two subset arguments bkg_wcs(   \"dgm200_inspire__EL.GridCoverage\",   endpoint = \"dgm200_inspire\",   subset = \"E(548282,552280)\",   subset = \"N(5800943,5804942)\" ) #> class       : SpatRaster  #> size        : 20, 20, 1  (nrow, ncol, nlyr) #> resolution  : 200, 200  (x, y) #> extent      : 548300, 552300, 5800900, 5804900  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / UTM zone 32N (EPSG:25832)  #> source      : file21662518de9e  #> name        : file21662518de9e"},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":null,"dir":"Reference","previous_headings":"","what":"BKG WFS — bkg_wfs","title":"BKG WFS — bkg_wfs","text":"Low-level interface BKG-style web feature services (WFS). function used high-level functions ffm depend WFS, e.g., bkg_admin. bkg_feature_types lists available feature types given endpoint.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BKG WFS — bkg_wfs","text":"","code":"bkg_wfs(   type_name,   endpoint = type_name,   version = \"2.0.0\",   method = NULL,   format = \"application/json\",   layer = NULL,   epsg = 3035,   properties = NULL,   filter = NULL,   server = sgx_base(),   ... )  bkg_feature_types(endpoint, server = sgx_base())"},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BKG WFS — bkg_wfs","text":"type_name Feature type WFS retrieve. can use bkg_feature_types retrieve list feature type names given endpoint. endpoint Endpoint interface. Note wfs_ appended rest product name must provided. example, wfs_vg250 becomes vg250. Defaults value type_name. version Service version WFS. Usually 2.0.0, services still use 1.0.0 1.1.0. method HTTP method use request. GET requests provide parameters using URL queries. Filters must provided CQL queries. less error-prone, allows maximum number 2048 characters. Especially providing sophisticated spatial queries, GET queries simply accepted services. cases makes sense use POST requests instead. NULL, method inferred type filter query provided filter (either XML CQL). filter provided, method inferred getOption(\"ffm_query_language\"). format Content type output. value heavily depends endpoint queried. services allow application/json support GML outputs. doubt, inspect GetCapabilities target service. Defaults \"application/json\". layer format specifies GML output, layer specifies layer downloaded GML file read. necessary GML file actually contains multiple layers. Defaults NULL. epsg Numeric value giving EPSG identifier coordinate reference system (CRS). EPSG code automatically formatted OGC-compliant manner. Note EPSG codes supported. Inspect GetCapabilities target service find EPSG codes available. Defaults EPSG:3035. properties Names columns include output. Defaults NULL (columns). filter WFS filter query (CQL XML) created wfs_filter. server WFS server domain use. Defaults SGX spatial data center BKG. ... parameters passed WFS query. case POST requests, additional namespaces may necessary query WFS. Argument names interpreted prefix (e.g. xmlns:wfs) argument values namespace links.","code":""},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BKG WFS — bkg_wfs","text":"sf tibble","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/bkg_wfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BKG WFS — bkg_wfs","text":"","code":"bkg_feature_types(\"vg5000_0101\") #> # A tibble: 7 × 3 #>   name                   title                   abstract                #>   <chr>                  <chr>                   <chr>                   #> 1 vg5000_0101:vg5000_lan Bundesland              Bundesland              #> 2 vg5000_0101:vg5000_gem Gemeinde                Gemeinde                #> 3 vg5000_0101:vg5000_li  Grenzlinien             Grenzlinien             #> 4 vg5000_0101:vg5000_krs Kreis                   Kreis                   #> 5 vg5000_0101:vg5000_rbz Regierungsbezirk        Regierungsbezirk        #> 6 vg5000_0101:vg5000_sta Staat                   Staat                   #> 7 vg5000_0101:vg5000_vwg Verwaltungsgemeinschaft Verwaltungsgemeinschaft  bkg_wfs(   \"vg5000_lan\",   endpoint = \"vg5000_0101\",   count = 5,   properties = \"gen\",   epsg = 4326 )[-1] #> Simple feature collection with 5 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 5.866 ymin: 50.3227 xmax: 11.5977 ymax: 55.0571 #> Geodetic CRS:  WGS 84 #> # A tibble: 5 × 2 #>   gen                                                                   geometry #>   <chr>                                                       <MULTIPOLYGON [°]> #> 1 Schleswig-Holstein  (((8.7131 54.6776, 8.7068 54.6716, 8.6869 54.6709, 8.6813… #> 2 Hamburg             (((8.4593 53.9573, 8.4326 53.9449, 8.4203 53.9473, 8.438 … #> 3 Niedersachsen       (((6.8655 53.5847, 6.8527 53.59, 6.8637 53.5967, 6.8753 5… #> 4 Bremen              (((8.5625 53.5491, 8.5233 53.592, 8.5099 53.6031, 8.5185 … #> 5 Nordrhein-Westfalen (((8.9697 51.5058, 8.8907 51.482, 8.921 51.4457, 8.9195 5…  # Filters are created using `wfs_filter()` bkg_wfs(   \"vg5000_krs\",   endpoint = \"vg5000_0101\",   properties = \"gen\",   filter = wfs_filter(sn_l == 10) )[-1] #> Simple feature collection with 6 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 4057338 ymin: 2892729 xmax: 4132336 ymax: 2951744 #> Projected CRS: ETRS89-extended / LAEA Europe #> # A tibble: 6 × 2 #>   gen                                                                   geometry #>   <chr>                                                       <MULTIPOLYGON [m]> #> 1 Regionalverband Saarbrücken (((4090660 2904942, 4092223 2901447, 4091999 2900… #> 2 Merzig-Wadern               (((4078929 2926191, 4077635 2927692, 4074266 2926… #> 3 Neunkirchen                 (((4111255 2917867, 4109992 2917974, 4109230 2919… #> 4 Saarlouis                   (((4098717 2933513, 4101455 2934901, 4101490 2932… #> 5 Saarpfalz-Kreis             (((4122248 2915965, 4120329 2917230, 4120301 2920… #> 6 St. Wendel                  (((4105098 2950381, 4106357 2951744, 4108456 2950…"},{"path":"https://jslth.github.io/ffm/reference/nuts_data.html","id":null,"dir":"Reference","previous_headings":"","what":"German NUTS MULTIPOLYGONs — nuts_data","title":"German NUTS MULTIPOLYGONs — nuts_data","text":"Three sf dataframes containing geometries German NUTS1, NUTS2, NUTS3 regions, respectively. reference year 2023.","code":""},{"path":"https://jslth.github.io/ffm/reference/nuts_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German NUTS MULTIPOLYGONs — nuts_data","text":"","code":"bkg_nuts1  bkg_nuts2  bkg_nuts3"},{"path":"https://jslth.github.io/ffm/reference/nuts_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"German NUTS MULTIPOLYGONs — nuts_data","text":"dataframe format, see bkg_nuts. object class sf (inherits tbl_df, tbl, data.frame) 38 rows 7 columns. object class sf (inherits tbl_df, tbl, data.frame) 400 rows 7 columns.","code":""},{"path":"https://jslth.github.io/ffm/reference/nuts_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"German NUTS MULTIPOLYGONs — nuts_data","text":"© BKG (2025) dl-de/-2-0, data sources: https://sgx.geodatenzentrum.de/web_public/gdz/datenquellen/datenquellen_vg_nuts.pdf","code":""},{"path":[]},{"path":"https://jslth.github.io/ffm/reference/nuts_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"German NUTS MULTIPOLYGONs — nuts_data","text":"","code":"bkg_nuts1 #> Simple feature collection with 16 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 280353.1 ymin: 5235878 xmax: 921261.6 ymax: 6101302 #> Projected CRS: ETRS89 / UTM zone 32N #> # A tibble: 16 × 7 #>    OBJID            BEGINN        GF NUTS_LEVEL NUTS_CODE NUTS_NAME              #>    <chr>            <date>     <int>      <int> <chr>     <chr>                  #>  1 DEBKGNU5000000C8 2021-10-04     9          1 DE1       Baden-Württemberg      #>  2 DEBKGNU5000000C9 2021-10-04     9          1 DE2       Bayern                 #>  3 DEBKGNU5000000CA 2021-10-04     9          1 DE3       Berlin                 #>  4 DEBKGNU5000000CB 2021-10-04     9          1 DE4       Brandenburg            #>  5 DEBKGNU5000000CC 2021-10-04     9          1 DE5       Bremen                 #>  6 DEBKGNU5000000CD 2021-10-04     9          1 DE6       Hamburg                #>  7 DEBKGNU5000000CE 2021-10-04     9          1 DE7       Hessen                 #>  8 DEBKGNU5000000CF 2021-10-04     9          1 DE8       Mecklenburg-Vorpommern #>  9 DEBKGNU5000000CG 2021-10-04     9          1 DE9       Niedersachsen          #> 10 DEBKGNU5000000CH 2021-10-04     9          1 DEA       Nordrhein-Westfalen    #> 11 DEBKGNU5000000CI 2021-10-04     9          1 DEB       Rheinland-Pfalz        #> 12 DEBKGNU5000000CJ 2021-10-04     9          1 DEC       Saarland               #> 13 DEBKGNU5000000CK 2021-10-04     9          1 DED       Sachsen                #> 14 DEBKGNU5000000CL 2021-10-04     9          1 DEE       Sachsen-Anhalt         #> 15 DEBKGNU5000000CM 2021-10-04     9          1 DEF       Schleswig-Holstein     #> 16 DEBKGNU5000000CN 2021-10-04     9          1 DEG       Thüringen              #> # ℹ 1 more variable: geometry <MULTIPOLYGON [m]>"},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"WFS filters — wfs_filter","title":"WFS filters — wfs_filter","text":"Utility functions construct XML CQL queries. functions backend filter argument filter capabilities ffm functions interact WFS (e.g., bkg_admin, bkg_clc bkb_geonames).","code":""},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WFS filters — wfs_filter","text":"","code":"wfs_filter(   ...,   filter = NULL,   bbox = NULL,   poly = NULL,   predicate = \"intersects\",   geom_property = \"geom\",   default_crs = 25832,   lang = NULL )"},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WFS filters — wfs_filter","text":"... Used construct CQL filters. Dot arguments accept R-like syntax converted CQL queries internally. queries basically consist property name left, aribtrary vector right, operator links sides. multiple queries provided, chained . following operators respective equivalents CQL XML supported: construct complex queries, can use filter argument pass CQL queries directly. Also note can switch CQL XML queries using options(ffm_query_language = \"xml\"). See also wfs_filter. filter character string containing valid CQL XML filter. string appended query constructed .... Use argument construct complex filters. Defaults NULL. bbox sf geometry boundary box vector format c(xmin, ymin, xmax, ymax). Used geometric filter include geometries relate bbox according predicate specified predicate. sf geometry provided, coordinates automatically transformed ESPG:25832 (default CRS), otherwise expected EPSG:25832. poly sf geometry. Used geometric filter include geometries relate poly according predicate specified predicate. Coordinates automatically transformed ESPG:25832 (default CRS). predicate spatial predicate used relate output geometries object specified bbox poly. example, predicate = \"within\", bbox specified, returns geometries lie within bbox. Can one \"equals\", \"disjoint\", \"intersects\", \"touches\", \"crosses\", \"within\", \"contains\", \"overlaps\", \"relate\", \"dwithin\", \"beyond\". Defaults \"intersects\". geom_property Name geometry property included WFS. cases, \"geom\", exceptions. default_crs WFS defines default CRS coordinates spatial filtering provided. BKG services, usually EPSG:25832. sf objects provided bbox poly first transformed CRS creating query. lang Query language use constructing query. One \"cql\" \"xml\". default, almost ffm functions use CQL simpler less prone errors. However, CQL limited terms query size. Especially providing poly, URLs can become long WFS server decline . XML can valid alternative construct large queries. Additionally, services like one used bkg_geonames support XML. NULL, defaults getOption(\"ffm_query_language\").","code":""},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WFS filters — wfs_filter","text":"CQL query XML query depending lang argument.","code":""},{"path":"https://jslth.github.io/ffm/reference/wfs_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WFS filters — wfs_filter","text":"","code":"# CQL and XML support mostly the same things wfs_filter(ags %LIKE% \"05%\", lang = \"cql\") #> ags LIKE '05%'  wfs_filter(ags %LIKE% \"05%\", lang = \"xml\") #> <fes:Filter> #>   <fes:PropertyIsLike wildCard=\"%\" singleChar=\"_\" escapeChar=\"\\\"> #>     <fes:ValueReference>ags<\/fes:ValueReference> #>     <fes:Literal>05%<\/fes:Literal> #>   <\/fes:PropertyIsLike> #> <\/fes:Filter>   bbox <- c(xmin = 5, ymin = 50, xmax = 7, ymax = 52) wfs_filter(bbox = bbox, lang = \"cql\") #> intersects(geom, POLYGON ((5 50, 7 50, 7 52, 5 52, 5 50)))  wfs_filter(bbox = bbox, lang = \"xml\") #> <fes:Filter> #>   <fes:Intersects> #>     <fes:ValueReference>geom<\/fes:ValueReference> #>     <gml:Polygon srsName=\"urn:ogc:def:crs:EPSG::25832\" gml:id=\"file2166172f0689.geom.0\"> #>       <gml:exterior> #>         <gml:LinearRing> #>           <gml:posList>5 50 7 50 7 52 5 52 5 50<\/gml:posList> #>         <\/gml:LinearRing> #>       <\/gml:exterior> #>     <\/gml:Polygon> #>   <\/fes:Intersects> #> <\/fes:Filter>   # Using `filter`, more complex queries can be built wfs_filter(ars %LIKE% \"%0\", filter = \"regierungs NOT IS NULL\") #> ars LIKE '%0' AND regierungs NOT IS NULL   wfs_filter(   filter = \"<fes:Not>     <fes:PropertyIsNull>       <fes:ValueReference>aussprache<\/fes:ValueReference>     <\/fes:PropertyIsNull>   <\/fes:Not>\",   lang = \"xml\" ) #> <fes:Filter> #>   <fes:Not> #>     <fes:PropertyIsNull> #>       <fes:ValueReference>aussprache<\/fes:ValueReference> #>     <\/fes:PropertyIsNull> #>   <\/fes:Not> #> <\/fes:Filter>"}]
